
import { NextApiRequest, NextApiResponse } from 'next';
import nc from 'next-connect';
import { Prisma, Space } from '@prisma/client';
import { prisma } from 'db';
import { onError, onNoMatch, requireUser } from 'lib/middleware';
import { withSessionRoute } from 'lib/session/withSession';
import { gettingStartedPageContent } from 'seedData';
import { postToDiscord, IEventToLog } from 'lib/log/userEvents';
import { setupDefaultPaymentMethods } from 'lib/payment-methods/defaultPaymentMethods';
import { updateSpacePermissionConfigurationMode } from 'lib/permissions/meta';
import { convertJsonPagesToPrisma } from 'lib/pages/server/convertJsonPagesToPrisma';
import path from 'node:path';

const handler = nc<NextApiRequest, NextApiResponse>({ onError, onNoMatch });

handler.use(requireUser).get(getSpaces).post(createSpace);

async function getSpaces (req: NextApiRequest, res: NextApiResponse<Space[]>) {
  const spaceRoles = await prisma.spaceRole.findMany({
    where: {
      userId: req.session.user.id
    },
    include: {
      space: true
    }
  });
  const spaces = spaceRoles.map(sr => sr.space);
  return res.status(200).json(spaces);
}

async function createSpace (req: NextApiRequest, res: NextApiResponse<Space>) {
  const data = req.body as Prisma.SpaceCreateInput;
  // add a first page to the space
  // data.pages = {
  //   create: [{
  //     author: { connect: { id: req.session.user.id } },
  //     autoGenerated: true,
  //     content: gettingStartedPageContent(),
  //     contentText: '',
  //     path: 'getting-started',
  //     title: 'Getting Started',
  //     type: 'page',
  //     updatedAt: new Date(),
  //     updatedBy: data.author.connect!.id!
  //   }]
  // };

  const space = await prisma.space.create({ data, include: { pages: true } });

  // Create all page content in a single transaction
  const sourceDataPath = path.resolve('scripts/exportData/exports/space-3c5b2550-0bde-494f-86b4-d2bc257536ae-pages-1657841593654');

  const seedPagesTransactionInput = await convertJsonPagesToPrisma({
    folderPath: sourceDataPath,
    spaceId: space.id
  });

  await prisma.$transaction([
    ...seedPagesTransactionInput.blocksToCreate.map(input => prisma.block.create({ data: input })),
    ...seedPagesTransactionInput.pagesToCreate.map(input => prisma.page.create({ data: input }))
  ]);

  const updatedSpace = await updateSpacePermissionConfigurationMode({
    permissionConfigurationMode: 'collaborative',
    spaceId: space.id
  });

  // Add default stablecoin methods
  await setupDefaultPaymentMethods({ spaceIdOrSpace: space });

  logSpaceCreation(space);

  return res.status(200).json(updatedSpace);
}

export default withSessionRoute(handler);

function logSpaceCreation (space: Space) {
  const eventLog: IEventToLog = {
    funnelStage: 'acquisition',
    eventType: 'create_workspace',
    message: `New workspace ${space.domain} has just been created`
  };

  postToDiscord(eventLog);
}
