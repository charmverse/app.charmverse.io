
import { NextApiRequest, NextApiResponse } from 'next';
import nc from 'next-connect';
import { Prisma, Page, PagePermission } from '@prisma/client';
import { prisma } from 'db';
import { onError, onNoMatch, requireUser } from 'lib/middleware';
import { createPagePermission, IPageWithPermissions } from 'lib/permissions/pages';
import { withSessionRoute } from 'lib/session/withSession';
import { IEventToLog, postToDiscord } from 'lib/log/userEvents';

const handler = nc<NextApiRequest, NextApiResponse>({ onError, onNoMatch });

handler.use(requireUser).post(createPage);

async function createPage (req: NextApiRequest, res: NextApiResponse<IPageWithPermissions>) {
  const data = req.body as Prisma.PageCreateInput;
  const page = await prisma.page.create({ data });
  const parentPage = page.parentId ? await prisma.page.findUnique({
    where: {
      id: page.parentId
    },
    include: {
      permissions: true
    }
  }) : null;

  const assignedPermissions: PagePermission [] = [];

  if (!parentPage) {
    const pagePermission = await createPagePermission({
      permissionLevel: 'full_access',
      pageId: page.id,
      spaceId: page.spaceId
    });

    assignedPermissions.push(pagePermission);
  }
  else {
    // Load up permissions
    const inheritedPermissions = await Promise.all(parentPage.permissions.map(permission => {
      return createPagePermission({
        permissionLevel: permission.permissionLevel,
        permissions: permission.permissions,
        pageId: page.id,
        // Only one of the below will be defined
        userId: permission.userId,
        roleId: permission.roleId,
        spaceId: permission.spaceId,
        // Support multi-level inheritance, just like in Notion
        inheritedFromPermission: permission.inheritedFromPermission ?? permission.id
      });
    }));

    assignedPermissions.push(...inheritedPermissions);
  }

  (page as any).permissions = assignedPermissions;
  logFirstWorkspacePageCreation(page);
  logFirstUserPageCreation(page);
  return res.status(200).json(page as IPageWithPermissions);
}

export default withSessionRoute(handler);

/**
 * Assumes that a first page will be created by the system
 * Should be called after a page is created
 * @param page
 */
async function logFirstWorkspacePageCreation (page: Page) {
  const workspaceCreatedPages = await prisma.page.count({
    where: {
      spaceId: page.spaceId,
      autoGenerated: {
        not: true
      }
    }
  });

  // Default page plus the just created page
  if (workspaceCreatedPages === 1) {

    const space = await prisma.space.findUnique({
      where: {
        id: page.spaceId!
      }
    });

    const eventLog: IEventToLog = {
      eventType: 'first_workspace_create_page',
      funnelStage: 'activation',
      message: `First page created in ${space!.domain} workspace`
    };

    postToDiscord(eventLog);
  }
}

/**
 * Assumes that a first page will be created by the system
 * Should be called after a page is created
 * @param page
 */
async function logFirstUserPageCreation (page: Page) {
  const userCreatedPages = await prisma.page.count({
    where: {
      createdBy: page.createdBy,
      autoGenerated: {
        not: true
      }
    }
  });

  // Default page plus the just created page
  if (userCreatedPages === 1) {

    const space = await prisma.space.findUnique({
      where: {
        id: page.spaceId!
      }
    });

    const eventLog: IEventToLog = {
      eventType: 'first_user_create_page',
      funnelStage: 'activation',
      message: `A user just created their first page. This happened in the ${space!.domain} workspace`
    };

    postToDiscord(eventLog);
  }
}
