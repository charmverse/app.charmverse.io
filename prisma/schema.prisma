// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Space {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  domain    String      @unique
  SpaceRole SpaceRole[]
  Page      Page[]
  // Board     Board[]
  Block     Block[]
}

model Page {
  id             String           @id @default(uuid()) @db.Uuid
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  createdBy      String
  updatedAt      DateTime?
  updatedBy      String
  title          String
  content        Json?
  headerImage    String?
  icon           String?
  isPublic       Boolean
  path           String
  parentId       String?
  spaceId        String
  space          Space            @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  type           String // 'page' | 'database';
  boardId        String?
  FavoritePage   FavoritePage[]
  PagePermission PagePermission[]
}

model PagePermission {
  level  String
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
}

// model Board {
//   id          String    @id @default(uuid()) @db.Uuid
//   deletedAt   DateTime?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime?
//   title       String
//   icon        String?
//   headerImage String?
//   spaceId     String
//   space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
//   fields      Json
// }

model Block {
  id        String    @id @db.Uuid
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String
  spaceId   String
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parentId  String
  rootId    String
  schema    Int
  type      String
  title     String
  fields    Json
}

model User {
  id             String           @id @default(uuid()) @db.Uuid
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  addresses      String
  discordId      String?
  username       String
  spaceRoles     SpaceRole[]
  FavoritePage   FavoritePage[]
  PagePermission PagePermission[]
}

model FavoritePage {
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
}

model SpaceRole {
  type    String
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
}
