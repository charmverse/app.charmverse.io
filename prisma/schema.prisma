// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["linux-musl", "darwin", "native"]
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PageType {
  board
  page
  card
  proposal
}

enum PermissionLevel {
  full_access
  editor
  view_comment
  view
}

enum SpacePermissionConfigurationMode {
  custom
  readOnly
  collaborative
  open
}

model Space {
  id                          String                            @id @default(uuid()) @db.Uuid
  deletedAt                   DateTime?
  createdAt                   DateTime                          @default(now())
  author                      User                              @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy                   String                            @db.Uuid
  updatedAt                   DateTime
  updatedBy                   String                            @db.Uuid
  name                        String
  spaceImage                  String?
  domain                      String                            @unique
  discordServerId             String?
  snapshotDomain              String?
  defaultVotingDuration       Int?
  spaceRoles                  SpaceRole[]
  permissions                 PagePermission[]
  pages                       Page[]
  blocks                      Block[]
  inviteLinks                 InviteLink[]
  bounties                    Bounty[]
  TokenGate                   TokenGate[]
  paymentMethods              PaymentMethod[]
  roles                       Role[]
  apiToken                    SpaceApiToken?
  threads                     Thread[]
  comments                    Comment[]
  votes                       Vote[]
  // Public page settings
  permissionConfigurationMode SpacePermissionConfigurationMode? @default(custom)
  defaultPagePermissionGroup PagePermissionLevel? @default(full_access)
  defaultPublicPages         Boolean ?  @default(false)
  publicBountyBoard          Boolean?   @default(false)
  // All role, user, space, space permissions for this space
  permittedGroups             SpacePermission[]                 @relation(name: "permittedGroups")
  // Space permissions this space has (for itself or other spaces => Currently we only allow space level permissions for same space)
  spacePermissions            SpacePermission[]                 @relation(name: "spacePermissions")
  bountyPermissions           BountyPermission[]

}

model SpaceApiToken {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  spaceId   String   @unique @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  token     String

  @@unique([token, spaceId])
}

model Page {
  id                 String           @id @default(uuid()) @db.Uuid
  deletedAt          DateTime?
  createdAt          DateTime         @default(now())
  createdBy          String           @db.Uuid
  author             User             @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  index              Int              @default(-1)
  updatedAt          DateTime         @default(now())
  updatedBy          String           @db.Uuid
  title              String
  content            Json?
  contentText        String
  headerImage        String?
  icon               String?
  path               String
  parentId           String?          @db.Uuid
  spaceId            String           @db.Uuid
  space              Space?           @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type               PageType
  boardId            String?          @db.Uuid
  permissions        PagePermission[]
  favorites          FavoritePage[]
  autoGenerated      Boolean?         @default(false)
  cardId             String?          @unique @db.Uuid
  card               Block?           @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threads            Thread[]
  comments           Comment[]
  votes              Vote[]
  snapshotProposalId String?
  fullWidth          Boolean?         @default(false)
}

// focalboard blocks
model Block {
  id        String    @id @db.Uuid
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String    @db.Uuid
  user      User      @relation(fields: [createdBy], references: [id])
  updatedAt DateTime  @default(now())
  updatedBy String    @db.Uuid
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parentId  String
  rootId    String    @db.Uuid
  schema    Int
  type      String
  title     String
  fields    Json
  Page      Page[]
}

enum IdentityType {
  Wallet
  Discord
  Telegram
  RandomName
}

model UserVote {
  voteId    String   @db.Uuid
  vote      Vote     @relation(fields: [voteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  choice    String

  @@unique([voteId, userId])
}

enum VoteStatus {
  InProgress
  Passed
  Rejected
  Cancelled
}

enum VoteType {
  Approval
  SingleChoice
}

model VoteOptions {
  name   String
  voteId String @db.Uuid
  vote   Vote   @relation(fields: [voteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([voteId, name])
}

model Vote {
  id          String        @id @default(uuid()) @db.Uuid
  pageId      String        @db.Uuid
  page        Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  spaceId     String        @db.Uuid
  space       Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  author      User          @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy   String        @db.Uuid
  title       String
  threshold   Int
  description String?
  deadline    DateTime
  status      VoteStatus
  type        VoteType      @default(SingleChoice)
  createdAt   DateTime      @default(now())
  userVotes   UserVote[]
  voteOptions VoteOptions[]
}

model User {
  id                String                 @id @default(uuid()) @db.Uuid
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now())
  addresses         String[]
  email             String?
  spaceRoles        SpaceRole[]
  favorites         FavoritePage[]
  permissions       PagePermission[]
  pages             Page[]
  poaps             Poap[]
  blocks            Block[]
  spaces            Space[]
  inviteLinks       InviteLink[]
  bounties          Bounty[]
  applications      Application[]
  username          String
  avatar            String?
  path              String?                @unique
  isBot             Boolean?               @default(false)
  discordUser       DiscordUser?
  telegramUser      TelegramUser?
  comments          Comment[]
  threads           Thread[]
  gnosisSafes       UserGnosisSafe[]
  profile           UserDetails?
  identityType      IdentityType?
  notificationState UserNotificationState?
  UserNotification  UserNotification[]
  spacePermissions  SpacePermission[]
  bountyPermissions BountyPermission[]
  userVotes         UserVote[]
  initiatedVotes    Vote[]
}

model UserNotificationState {
  snoozedUntil  DateTime?
  snoozeMessage String?
  userId        String    @unique @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum NotificationType {
  multisig
  mention
  vote
}

model UserNotification {
  taskId    String           @unique
  createdAt DateTime         @default(now())
  userId    String           @db.Uuid
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      NotificationType

  @@unique([taskId, userId])
}

model UserDetails {
  id          String  @id @db.Uuid
  user        User    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description String?
  social      Json?
}

model TelegramUser {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  telegramId Int      @id
  account    Json
}

model DiscordUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discordId String   @id
  account   Json
}

model Poap {
  id            String   @id @default(uuid()) @db.Uuid
  tokenId       String   @unique
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  walletAddress String
  isHidden      Boolean?
}

model FavoritePage {
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, userId])
}

model SpaceRole {
  id                     String            @id @default(uuid()) @db.Uuid
  isAdmin                Boolean           @default(false)
  createdAt              DateTime          @default(now())
  spaceId                String            @db.Uuid
  space                  Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId                 String            @db.Uuid
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tokenGateId            String?           @db.Uuid
  tokenGate              TokenGate?        @relation(fields: [tokenGateId], references: [id])
  tokenGateConnectedDate DateTime?
  spaceRoleToRole        SpaceRoleToRole[]

  @@unique([spaceId, userId], name: "spaceUser")
}

model InviteLink {
  id            String   @id @default(uuid()) @db.Uuid
  code          String   @unique
  createdAt     DateTime @default(now())
  author        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy     String   @db.Uuid
  spaceId       String   @db.Uuid
  space         Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  maxAgeMinutes Int      @default(60)
  maxUses       Int      @default(-1)
  useCount      Int      @default(0)
}

enum BountyStatus {
  suggestion
  open
  inProgress
  complete
  paid
}

model Bounty {
  id                String             @id @default(uuid()) @db.Uuid
  author            User               @relation(fields: [createdBy], references: [id])
  createdBy         String             @db.Uuid()
  suggestedBy       String?            @db.Uuid()
  space             Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId           String             @db.Uuid
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  description       String
  descriptionNodes  Json
  chainId           Int
  rewardAmount      Float
  rewardToken       String
  status            BountyStatus       @default(open)
  title             String
  linkedTaskId      String?            @db.Uuid
  approveSubmitters Boolean            @default(false)
  maxSubmissions    Int?               @default(1)
  applications      Application[]
  permissions       BountyPermission[]
}

// Not currently used at database level. Defined here so we have a single source of truth
enum BountyOperation {
  work
  review
  view
  edit
  delete
  lock
  approve_applications
  grant_permissions
}

enum BountyPermissionLevel {
  reviewer
  creator
  submitter
  viewer
}

model BountyPermission {
  id              String                @id @default(uuid()) @db.Uuid
  // Ways a permission can be accessed (pick one)
  userId          String?               @db.Uuid
  user            User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId         String?               @db.Uuid
  space           Space?                @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  roleId          String?               @db.Uuid
  role            Role?                 @relation(fields: [roleId], references: [id], onDelete: Cascade)
  // Should be only null or true
  public          Boolean?
  bountyId        String                @db.Uuid
  bounty          Bounty                @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  permissionLevel BountyPermissionLevel
  // For now, our implementation only needs permissionLevel. Adding this reference so the enum is not dropped by Prisma client
  operations      BountyOperation[]

  @@unique([userId, bountyId, permissionLevel], name: "userId_bountyId_permissionLevel")
  @@unique([roleId, bountyId, permissionLevel], name: "roleId_bountyId_permissionLevel")
  @@unique([spaceId, bountyId, permissionLevel], name: "spaceId_bountyId_permissionLevel")
  @@unique([public, bountyId, permissionLevel], name: "public_bountyId_permissionLevel")
}

enum ApplicationStatus {
  applied
  inProgress
  review
  rejected
  complete
  paid
}

model Application {
  id              String            @id @default(uuid()) @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  status          ApplicationStatus @default(applied)
  spaceId         String
  bountyId        String            @db.Uuid()
  bounty          Bounty            @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  createdBy       String            @db.Uuid()
  applicant       User              @relation(fields: [createdBy], references: [id])
  walletAddress   String?
  message         String?
  submission      String?
  submissionNodes String?
  acceptedBy      String?           @db.Uuid() // Reviewer who accepted the application
  reviewedBy      String?           @db.Uuid() // Reviewer who reviewed the final submission
  transactions    Transaction[]

  @@unique([bountyId, createdBy])
}

model Transaction {
  id            String      @id @default(uuid()) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  transactionId String
  chainId       String
  applicationId String      @db.Uuid()
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model TokenGate {
  id               String            @id @default(uuid()) @db.Uuid
  createdAt        DateTime          @default(now())
  createdBy        String            @db.Uuid()
  spaceId          String            @db.Uuid
  space            Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  conditions       Json
  resourceId       Json
  userRole         String?
  spaceRoles       SpaceRole[]
  tokenGateToRoles TokenGateToRole[]
}

enum WalletType {
  metamask
  gnosis
}

model PaymentMethod {
  id                String     @id @default(uuid()) @db.Uuid
  createdAt         DateTime   @default(now())
  createdBy         String     @db.Uuid()
  spaceId           String     @db.Uuid
  space             Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  chainId           Int
  gnosisSafeAddress String?
  contractAddress   String?
  tokenName         String
  tokenSymbol       String
  tokenDecimals     Int
  tokenLogo         String?
  walletType        WalletType @default(metamask)

  // Vanilla payment methods

  // Gnosis safes
  @@unique([spaceId, chainId, contractAddress])
  @@unique([spaceId, chainId, gnosisSafeAddress])
}

model UserGnosisSafe {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chainId   Int
  address   String
  name      String?
  threshold Int
  owners    String[]
}

enum RoleSource {
  guild_xyz
}

model Role {
  id                String             @id @default(uuid()) @db.Uuid
  createdAt         DateTime           @default(now())
  createdBy         String             @db.Uuid()
  name              String
  spaceId           String             @db.Uuid
  space             Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceRolesToRole  SpaceRoleToRole[]
  permissions       PagePermission[]
  source            RoleSource?
  sourceId          String?
  spacePermissions  SpacePermission[]
  bountyPermissions BountyPermission[]

  TokenGateToRole TokenGateToRole[]
  @@unique([spaceId, name])
}

model TokenGateToRole {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  tokenGateId String    @db.Uuid
  tokenGate   TokenGate @relation(fields: [tokenGateId], references: [id], onDelete: Cascade)
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([tokenGateId, roleId])
}

model SpaceRoleToRole {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  spaceRoleId String    @db.Uuid
  spaceRole   SpaceRole @relation(fields: [spaceRoleId], references: [id], onDelete: Cascade)
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([spaceRoleId, roleId])
}

// Various types of permissions in our system
enum PagePermissionLevel {
  full_access
  editor
  view_comment
  view
  custom
}

// Not used in database, but indicates the permission columns
// Defined here to minimuse risk of these getting out of sync
enum PageOperations {
  read
  delete
  comment
  edit_position
  edit_content
  edit_isPublic
  edit_path
  grant_permissions
}

model PagePermission {
  id                      String              @id @default(uuid()) @db.Uuid
  // Ways a permission can be accessed (pick one)
  userId                  String?             @db.Uuid
  user                    User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId                 String?             @db.Uuid
  space                   Space?              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  roleId                  String?             @db.Uuid
  role                    Role?               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  // Should be only null or true
  public                  Boolean?
  // Resource being accessed (pick one)
  pageId                  String              @db.Uuid
  page                    Page                @relation(fields: [pageId], references: [id], onDelete: Cascade)
  permissionLevel         PagePermissionLevel
  // The permissionId ID this permission was inherited from
  inheritedFromPermission String?             @db.Uuid
  sourcePermission        PagePermission?     @relation(fields: [inheritedFromPermission], references: [id], onDelete: Cascade, name: "InheritedPermissions")
  // The children who inherit from this
  inheritingChildren      PagePermission[]    @relation("InheritedPermissions")


  // Scope of access
  // We only need to store true values
  permissions PageOperations[]


  @@unique([userId, pageId], name: "userId_PageId")
  @@unique([roleId, pageId], name: "roleId_pageId")
  @@unique([spaceId, pageId], name: "spaceId_pageId")
  @@unique([public, pageId], name: "public_pageId")
}

enum SpaceOperation {
  createPage
  createBounty
  createVote
}

model SpacePermission {
  id         String           @id @default(uuid()) @db.Uuid
  createdAt  DateTime         @default(now())
  operations SpaceOperation[]
  forSpaceId String           @db.Uuid
  forSpace   Space            @relation(fields: [forSpaceId], references: [id], onDelete: Cascade, name: "permittedGroups")
  // Linkable groups
  roleId     String?          @db.Uuid
  role       Role?            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  spaceId    String?          @db.Uuid
  space      Space?           @relation(fields: [spaceId], references: [id], onDelete: Cascade, name: "spacePermissions")
  userId     String?          @db.Uuid
  user       User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, forSpaceId], name: "userId_forSpaceId")
  @@unique([roleId, forSpaceId], name: "roleId_forSpaceId")
  @@unique([spaceId, forSpaceId], name: "spaceId_forSpaceId")
}

model Thread {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  pageId    String    @db.Uuid
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  context   String
  userId    String    @db.Uuid()
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  resolved  Boolean
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  updatedAt DateTime?
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  threadId  String    @db.Uuid
  thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  content   Json?
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  pageId    String    @db.Uuid
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  updatedAt DateTime?
}
