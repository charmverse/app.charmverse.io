// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "darwin", "native"]
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PageType {
  board
  page
}

enum PermissionLevel {
  full_access
  editor
  view_comment
  view
}

model Space {
  id              String           @id @default(uuid()) @db.Uuid
  deletedAt       DateTime?
  createdAt       DateTime         @default(now())
  author          User             @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy       String           @db.Uuid
  updatedAt       DateTime
  updatedBy       String           @db.Uuid
  name            String
  domain          String           @unique
  discordServerId String?
  spaceRoles     SpaceRole[]
  permissions    PagePermission[]
  pages          Page[]
  blocks         Block[]
  inviteLinks    InviteLink[]
  bounties       Bounty[]
  TokenGate      TokenGate[]
  paymentMethods PaymentMethod[]
  roles          Role[]
  apiToken       SpaceApiToken?
}

model SpaceApiToken {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  token     String

  @@unique([token, spaceId])
}


model Page {
  id            String           @id @default(uuid()) @db.Uuid
  deletedAt     DateTime?
  createdAt     DateTime         @default(now())
  createdBy     String           @db.Uuid
  author        User             @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  index         Int              @default(-1)
  updatedAt     DateTime         @default(now())
  updatedBy     String           @db.Uuid
  title         String
  content       Json?
  contentText   String
  headerImage   String?
  icon          String?
  isPublic      Boolean          @default(false)
  path          String
  parentId      String?          @db.Uuid
  spaceId       String?          @db.Uuid
  space         Space?           @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type          PageType
  boardId       String?          @db.Uuid
  permissions   PagePermission[]
  favorites     FavoritePage[]
  autoGenerated Boolean?         @default(false)
  cardId        String?          @db.Uuid
}

// focalboard blocks
model Block {
  id        String    @id @db.Uuid
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String    @db.Uuid
  user      User      @relation(fields: [createdBy], references: [id])
  updatedAt DateTime  @default(now())
  updatedBy String    @db.Uuid
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parentId  String
  rootId    String    @db.Uuid
  schema    Int
  type      String
  title     String
  fields    Json
}

model User {
  id           String           @id @default(uuid()) @db.Uuid
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  addresses    String[]
  spaceRoles   SpaceRole[]
  favorites    FavoritePage[]
  permissions  PagePermission[]
  pages        Page[]
  blocks       Block[]
  spaces       Space[]
  inviteLinks  InviteLink[]
  bounties     Bounty[]
  applications Application[]
  username     String?
  avatar       String?
  isBot        Boolean?        @default(false)
  discordUser  DiscordUser?
  telegramUser TelegramUser?
}

model TelegramUser {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  telegramId Int   @id
  account    Json
}

model DiscordUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discordId String   @id
  account   Json
}

model FavoritePage {
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, userId])
}

model SpaceRole {
  id                     String            @id @default(uuid()) @db.Uuid
  role                   String            @default("contributor")
  isAdmin                Boolean           @default(false)
  spaceId                String            @db.Uuid
  space                  Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId                 String            @db.Uuid
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tokenGateId            String?           @db.Uuid
  tokenGate              TokenGate?        @relation(fields: [tokenGateId], references: [id])
  tokenGateConnectedDate DateTime?
  spaceRoleToRole        SpaceRoleToRole[]

  @@unique([spaceId, userId], name: "spaceUser")
}

model InviteLink {
  id            String   @id @default(uuid()) @db.Uuid
  code          String   @unique
  createdAt     DateTime @default(now())
  author        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy     String   @db.Uuid
  spaceId       String   @db.Uuid
  space         Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  maxAgeMinutes Int      @default(60)
  maxUses       Int      @default(-1)
  useCount      Int      @default(0)
}

enum BountyStatus {
  open
  assigned
  review
  complete
  paid
}

model Bounty {
  id               String        @id @default(uuid()) @db.Uuid
  author           User          @relation(fields: [createdBy], references: [id])
  createdBy        String        @db.Uuid()
  space            Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId          String        @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  description      String
  descriptionNodes Json
  reviewer         String?       @db.Uuid
  assignee         String?       @db.Uuid
  chainId          Int
  rewardAmount     Float
  rewardToken      String
  status           BountyStatus  @default(open)
  title            String
  linkedTaskId     String?       @db.Uuid
  applications     Application[]
  transactions     Transaction[]
}

model Application {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  bountyId      String   @db.Uuid()
  bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  createdBy     String   @db.Uuid()
  applicant     User     @relation(fields: [createdBy], references: [id])
  walletAddress String
  message       String
}

model Transaction {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  transactionId String
  chainId       String
  bountyId      String   @db.Uuid()
  bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
}

model TokenGate {
  id         String      @id @default(uuid()) @db.Uuid
  createdAt  DateTime    @default(now())
  createdBy  String      @db.Uuid()
  spaceId    String      @db.Uuid
  space      Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  conditions Json
  resourceId Json
  userRole   String?
  spaceRoles SpaceRole[]
}

enum WalletType {
  metamask
  gnosis
}

model PaymentMethod {
  id                String     @id @default(uuid()) @db.Uuid
  createdAt         DateTime   @default(now())
  createdBy         String     @db.Uuid()
  spaceId           String     @db.Uuid
  space             Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  chainId           Int
  gnosisSafeAddress String?
  contractAddress   String?
  tokenName         String
  tokenSymbol       String
  tokenDecimals     Int
  tokenLogo         String?
  walletType        WalletType @default(metamask)
}

model Role {
  id               String            @id @default(uuid()) @db.Uuid
  createdAt        DateTime          @default(now())
  createdBy        String            @db.Uuid()
  name             String
  spaceId          String            @db.Uuid
  space            Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceRolesToRole SpaceRoleToRole[]
  permissions      PagePermission[]

  @@unique([spaceId, name])
}

model SpaceRoleToRole {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  spaceRoleId String    @db.Uuid
  spaceRole   SpaceRole @relation(fields: [spaceRoleId], references: [id], onDelete: Cascade)
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([spaceRoleId, roleId])
}

enum PagePermissionLevel {
  full_access
  editor
  view_comment
  view
  custom
}

// Not used in database, but indicates the permission columns
// Defined here to minimuse risk of these getting out of sync
enum PageOperations {
  read
  delete
  edit_position
  edit_content
  edit_isPublic
  edit_path
  grant_permissions
}

model PagePermission {
  id              String              @id @default(uuid()) @db.Uuid
  // Ways a permission can be accessed (pick one)
  userId          String?             @db.Uuid
  user            User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId         String?             @db.Uuid
  space           Space?              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  roleId          String?             @db.Uuid
  role            Role?               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  // Resource being accessed (pick one)
  pageId          String              @db.Uuid
  page            Page                @relation(fields: [pageId], references: [id], onDelete: Cascade)
  permissionLevel PagePermissionLevel
  // Scope of access
  // We only need to store true values
  permissions     PageOperations[]


  @@unique([userId, pageId], name: "userId_PageId")
  @@unique([roleId, pageId], name: "roleId_pageId")
  @@unique([spaceId, pageId], name: "spaceId_pageId")
}


