// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Space {
  id          String      @id @default(uuid()) @db.Uuid
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  createdBy   String
  updatedAt   DateTime
  updatedBy   String
  name        String
  domain      String      @unique
  permissions SpaceRole[]
  pages       Page[]
  blocks      Block[]
}

model Page {
  id            String           @id @default(uuid()) @db.Uuid
  deletedAt     DateTime?
  createdAt     DateTime         @default(now())
  createdBy     String           @db.Uuid
  createdByUser User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  updatedAt     DateTime
  updatedBy     String           @db.Uuid
  title         String
  content       Json?
  contentString String
  headerImage   String?
  icon          String?
  isPublic      Boolean
  path          String
  parentId      String?
  spaceId       String?
  space         Space?           @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  type          String
  boardId       String?
  permissions   PagePermission[]
  favorites     FavoritePage[]
}

model Block {
  id            String    @id @db.Uuid
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  createdBy     String    @db.Uuid
  createdByUser User      @relation("createdBy", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedAt     DateTime
  updatedBy     String    @db.Uuid
  updatedByUser User      @relation("updatedBy", fields: [updatedBy], references: [id])
  spaceId       String
  space         Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parentId      String
  rootId        String
  schema        Int
  type          String
  title         String
  fields        Json
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  addresses       String[]
  discordId       String?
  spaceRoles      SpaceRole[]
  favorites       FavoritePage[]
  pagePermissions PagePermission[]
  pages           Page[]
  createdBlocks   Block[]          @relation("createdBy")
  updatedBlocks   Block[]          @relation("updatedBy")
}

model FavoritePage {
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
}

model PagePermission {
  level  String
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
}

model SpaceRole {
  role    String
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
}
