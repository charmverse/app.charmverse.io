// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "darwin", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PageType {
  board
  page
}

enum PermissionLevel {
  full_access
  editor
  view_comment
  view
}

enum Role {
  admin
  contributor
}

model Space {
  id             String          @id @default(uuid()) @db.Uuid
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  author         User            @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy      String          @db.Uuid
  updatedAt      DateTime
  updatedBy      String          @db.Uuid
  name           String
  domain         String          @unique
  permissions    SpaceRole[]
  pages          Page[]
  blocks         Block[]
  inviteLinks    InviteLink[]
  bounties       Bounty[]
  TokenGate      TokenGate[]
  paymentMethods PaymentMethod[]
}

model Page {
  id            String           @id @default(uuid()) @db.Uuid
  deletedAt     DateTime?
  createdAt     DateTime         @default(now())
  createdBy     String           @db.Uuid
  author        User             @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  index         Int              @default(-1)
  updatedAt     DateTime         @default(now())
  updatedBy     String           @db.Uuid
  title         String
  content       Json?
  contentText   String
  headerImage   String?
  icon          String?
  isPublic      Boolean          @default(false)
  path          String
  parentId      String?          @db.Uuid
  spaceId       String?          @db.Uuid
  space         Space?           @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type          PageType
  boardId       String?          @db.Uuid
  permissions   PagePermission[]
  favorites     FavoritePage[]
  autoGenerated Boolean?         @default(false)
}

// focalboard blocks
model Block {
  id        String    @id @db.Uuid
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String    @db.Uuid
  user      User      @relation(fields: [createdBy], references: [id])
  updatedAt DateTime  @default(now())
  updatedBy String    @db.Uuid
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parentId  String
  rootId    String    @db.Uuid
  schema    Int
  type      String
  title     String
  fields    Json
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  addresses       String[]
  spaceRoles      SpaceRole[]
  favorites       FavoritePage[]
  pagePermissions PagePermission[]
  pages           Page[]
  blocks          Block[]
  spaces          Space[]
  inviteLinks     InviteLink[]
  bounties        Bounty[]
  applications    Application[]
}

model FavoritePage {
  pageId String @db.Uuid
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, userId])
}

model PagePermission {
  level  PermissionLevel
  pageId String          @db.Uuid
  page   Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId String          @db.Uuid
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, userId])
}

model SpaceRole {
  role                   Role       @default(contributor)
  spaceId                String     @db.Uuid
  space                  Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId                 String     @db.Uuid
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tokenGateId            String?    @db.Uuid
  tokenGate              TokenGate? @relation(fields: [tokenGateId], references: [id])
  tokenGateConnectedDate DateTime?

  @@unique([spaceId, userId])
}

model InviteLink {
  id            String   @id @default(uuid()) @db.Uuid
  code          String   @unique
  createdAt     DateTime @default(now())
  author        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy     String   @db.Uuid
  spaceId       String   @db.Uuid
  space         Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  maxAgeMinutes Int      @default(60)
  maxUses       Int      @default(-1)
  useCount      Int      @default(0)
}

enum BountyStatus {
  open
  assigned
  review
  complete
  paid
}

model Bounty {
  id               String        @id @default(uuid()) @db.Uuid
  author           User          @relation(fields: [createdBy], references: [id])
  createdBy        String        @db.Uuid()
  space            Space         @relation(fields: [spaceId], references: [id])
  spaceId          String        @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  description      String
  descriptionNodes Json
  reviewer         String?       @db.Uuid
  assignee         String?       @db.Uuid
  chainId          Int
  rewardAmount     Float
  rewardToken      String
  status           BountyStatus  @default(open)
  title            String
  linkedTaskId     String?       @db.Uuid
  applications     Application[]
  transactions     Transaction[]
}

model Application {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  bountyId      String   @db.Uuid()
  bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  createdBy     String   @db.Uuid()
  applicant     User     @relation(fields: [createdBy], references: [id])
  walletAddress String
  message       String
}

model Transaction {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  transactionId String
  chainId       String
  bountyId      String   @db.Uuid()
  bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
}

model TokenGate {
  id         String      @id @default(uuid()) @db.Uuid
  createdAt  DateTime    @default(now())
  createdBy  String      @db.Uuid()
  spaceId    String      @db.Uuid
  space      Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  conditions Json
  resourceId Json
  userRole   Role?
  spaceRoles SpaceRole[]
}

enum WalletType {
  metamask
  gnosis
}

model PaymentMethod {
  id                String     @id @default(uuid()) @db.Uuid
  createdAt         DateTime   @default(now())
  createdBy         String     @db.Uuid()
  spaceId           String     @db.Uuid
  space             Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  chainId           Int
  gnosisSafeAddress String?
  contractAddress   String?
  tokenName         String
  tokenSymbol       String
  tokenDecimals     Int
  tokenLogo         String?
  walletType        WalletType @default(metamask)
}
