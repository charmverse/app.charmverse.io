services:
  defaults:
    image: '310849459438.dkr.ecr.us-east-1.amazonaws.com/charmverse-web3-workspace:${IMGTAG}'
    labels:
      com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "${SERVICE_NAME}"}]'
      com.datadoghq.tags.service: "${SERVICE_NAME}"
    volumes:
      - $PWD/.env:/app/.env
    ports:
      - '80:3000'
    env_file:
      - '.env'

    environment:
      - NODE_ENV=production
    profiles:
      # services need at least one profile or else they will be started along with what is in COMPOSE_PROFILES env var
      - default_config

  prd-cron:
    extends:
      service: defaults
    command: ['npm', 'run', 'cron:prod']
    profiles:
      - prd-cron

  stg-cron:
    extends:
      service: defaults
    command: ['npm', 'run', 'cron:staging']
    environment:
      - NEXT_PUBLIC_APP_ENV=staging
    profiles:
      - stg-cron

  prd-webapp:
    extends:
      service: defaults
    command: ['sh', '-c', 'npm run prisma:deploy && node --require dd-trace/init node_modules/.bin/next start --keepAliveTimeout 70000']
    profiles:
      - prd-webapp

  stg-webapp:
    extends:
      service: defaults
    command: ['sh', '-c', 'npm run prisma:deploy && node --require dd-trace/init node_modules/.bin/next start --keepAliveTimeout 70000']
    environment:
      - NEXT_PUBLIC_APP_ENV=staging
    profiles:
      - stg-webapp

  prd-sockets:
    extends:
      service: defaults
    command: ['sh', '-c', 'node ./.next/server/websockets.js']
    profiles:
      - prd-sockets

  stg-sockets:
    extends:
      service: defaults
    command: ['sh', '-c', 'node ./.next/server/websockets.js']
    environment:
      - NEXT_PUBLIC_APP_ENV=staging
    profiles:
      - stg-sockets

  devapp:
    build:
      context: .
    ports:
      - '80:3000'
    command: ['npm', 'start']
    volumes:
      - $PWD:/app
    env_file:
      - '.env'
    depends_on:
      - localpostgres
    profiles:
      - dev

  localpostgres:
    image: postgres
    ports:
      - '5432:5432'
    volumes:
      - ${LOCAL_DATA_DIR:-/home/postgresql}:/var/lib/postgresql/
    profiles:
      - dev

  datadog-agent:
    image: public.ecr.aws/datadog/agent
    hostname: datadog-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/host/var/log:ro
      - $PWD/.env:/app/.env
    env_file:
      - '.env'
    environment:
      DD_LOGS_ENABLED: 'true'
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: 'true'
      DD_CONTAINER_EXCLUDE: 'image:public.ecr.aws/datadog/agent'
      DD_SITE: 'datadoghq.com'
      DD_APM_ENABLED: 'true'
      DD_APM_NON_LOCAL_TRAFFIC: 'true'
      DD_ENV: '${SERVICE_ENV:-tst}'
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: 'true'
      DD_EC2_PREFER_IMDSV2: 'true'
    profiles:
      - prd-cron
      - prd-webapp
      - prd-sockets
      - ddtst
