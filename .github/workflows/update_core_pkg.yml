# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy with latest Core pkg

on:
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version'
        required: true

jobs:
  build-test-env:
    name: Build test env
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.get_build_id.outputs.build_id }}
      core_bump_commit_hash: ${{ steps.install_dependencies.outputs.core_bump_commit_hash }}
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"
      - uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        id: install_dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          commit_core_pkg_upgrade: true

      - name: Calculate Build ID
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'pages/api/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Build app
        uses: ./.github/actions/build
        with:
          REACT_APP_APP_ENV: 'production'

      - name: Save dependency and build using another cache key to do one step restore in subsequent jobs
        id: update_cache_build
        uses: actions/cache/save@v3
        with:
          path: |
            .next
            .env.test.local
            dist
            ./node_modules
          key: webapp-corebump-${{ hashFiles('package-lock.json') }}-${{ steps.install_dependencies.outputs.core_bump_commit_hash }}


  build-docker-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: build-test-env
    outputs:
      img_tag: "${{ steps.docker_build_push.outputs.img_tag }}"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
      - name: Restore dependencies and build from cache
        id: update_cache_dependencies
        uses: actions/cache/restore@v3
        with:
          path: |
            .next
            .env.test.local
            dist
            ./node_modules
          key: webapp-corebump-${{ hashFiles('package-lock.json') }}-${{ needs.build-test-env.outputs.core_bump_commit_hash }}
          fail-on-cache-miss: true

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        with:
          codebase_sha: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1


  upload-assets-to-s3-datadog:
    name: Upload asset to s3 and source maps to datadog
    runs-on: ubuntu-latest
    needs: build-test-env
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
      - name: Restore dependencies and build from cache
        id: update_cache_dependencies
        uses: actions/cache/restore@v3
        with:
          path: |
            .next
            .env.test.local
            dist
            ./node_modules
          key: webapp-corebump-${{ hashFiles('package-lock.json') }}-${{ needs.build-test-env.outputs.core_bump_commit_hash }}
          fail-on-cache-miss: true

      - name: Upload assets to s3 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          aws s3 sync .next/static/ s3://charm.cdn/webapp-assets/_next/static/
      - name: Use datadog ci package to upload js maps
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload .next/static       \
            --service=webapp                              \
            --release-version=${{ needs.build-test-env.outputs.build_id }}  \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static


  package-beanstalk-payload:
    name: Bundle Beanstalk Payload
    runs-on: ubuntu-latest
    needs: [build-test-env, build-docker-image]
    outputs:
      deploy_websocket: ${{ steps.pkg_websocket.outputs.deploy_websocket }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .NODE_ENV = "production" |
                    .IMGTAG = "${{ needs.build-docker-image.outputs.img_tag }}")
              ' .ebextensions/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ needs.build-docker-image.outputs.img_tag}}")
              ' .ebextensions_cron/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ needs.build-docker-image.outputs.img_tag }}")
              ' .ebextensions_websockets/00_env_vars.config

      - name: Add build_id and Bundle Webapp beanstalk payload
        run: |
          echo "REACT_APP_BUILD_ID=${{ needs.build-test-env.outputs.build_id }}" >> ./.ebstalk.apps.env/webapp.env
          cat files_to_zip.txt | zip --symlinks -r@ deploy.zip

      - name: Bundle CronWorker beanstalk payload
        run: |
          rm -rf .ebextensions && mv .ebextensions_cron .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy_cron.zip

      - name: Bundle Websocket beanstalk payload
        id: pkg_websocket
        run: |
          rm -rf .ebextensions && mv .ebextensions_websockets .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy_websockets.zip

      - name: Save dependency and build to another cache
        id: update_beanstalk_payload_cache
        uses: actions/cache/save@v3
        with:
          path: |
            *.zip
          key: webapp-corebump-${{ hashFiles('package-lock.json') }}-${{ needs.build-test-env.outputs.core_bump_commit_hash }}

  deploy_to_beanstalk:
    name: Deploy to beanstalk
    runs-on: ubuntu-latest
    needs: [ build-test-env, package-beanstalk-payload ]
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        include:
          - step_name: 'Deploying prd Worker to beanstalk'
            env_name: prd-charmverse-worker
            app_name: charmverse-worker
            deployment_package: deploy_cron.zip

          - step_name: 'Deploying prd Websocket to beanstalk'
            env_name: prd-charmverse-websockets
            app_name: prd-charmverse-websockets
            deployment_package: deploy_websockets.zip

          - step_name: 'Deploying prd Webapp to beanstalk'
            env_name: prd-charmverse-webapp
            app_name: web3-workspace
            deployment_package: deploy.zip

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
      - name: Restore beanstalk payload from cache
        id: restore_from_beanstalk_payload_cache
        uses: actions/cache/restore@v3
        with:
          path: |
            *.zip
          key: webapp-corebump-${{ hashFiles('package-lock.json') }}-${{ needs.build-test-env.outputs.core_bump_commit_hash }}

      - name: ${{matrix.step_name}}
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{matrix.app_name}}
          environment_name: ${{matrix.env_name}}
          version_label: ${{ needs.build-test-env.outputs.core_bump_commit_hash }}
          region: us-east-1
          deployment_package: ${{matrix.deployment_package}}
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: true

  discord_alert:
    name: Notify discord of failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-test-env, build-docker-image, package-beanstalk-payload, deploy_to_beanstalk]
    steps:
      - name: If any of prev jobs failed notify discord
        if: contains(needs.*.result, 'failure')
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
          status: 'failure'
          content: "Hey <@&1027309276454207519>"    
          title: "Webapp: Core pkg upgrade failed"
          description: |
            Failed workflow URL: https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}
          color: "16515843"
          url: "https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}"
          username: GitHub Actions
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/Octocat.png"

