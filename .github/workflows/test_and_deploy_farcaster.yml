name: Farcaster CI

on:
  push:
    branches: [main]
    paths:
      - '.ebextensions_farcaster/**'
      - '.ebstalk.apps.env/farcaster.env'
      - '.github/**'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/farcaster/**'
      - '@connect-shared/**'
      - 'adapters/**'
      - 'config/**'
      - 'hooks/**'
      - 'lib/**'
  pull_request:
    branches: ['**']
    paths:
      - '.ebextensions_farcaster/**'
      - '.ebstalk.apps.env/farcaster.env'
      - '.github/**'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/farcaster/**'
      - '@connect-shared/**'
      - 'adapters/**'
      - 'config/**'
      - 'hooks/**'
      - 'lib/**'
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version to update to'
        required: true

concurrency:
  group: ci-farcaster-${{ github.event_name }}-${{ github.ref }}

jobs:
  build-app:
    name: Build app
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get_head_commit_message.outputs.commit_message }}
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          commit_core_pkg_upgrade: true
          save_cache: true

      - name: Build apps
        uses: ./.github/actions/build_farcaster

      # source https://github.com/orgs/community/discussions/28474
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "commit_message=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"

  upload-docker:
    name: Upload Docker image
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: |
      (github.ref == 'refs/heads/main' && !(failure() || cancelled())) ||
      (github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy-farcaster') ||
      (github.event.action != 'labeled' && (contains(github.event.pull_request.labels.*.name, ':rocket: deploy-farcaster')))
    needs: build-app
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build_farcaster

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: charmverse-farcaster

  upload-static-assets:
    name: Upload assets in production
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: build-app
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Calculate Build ID
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'apps/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Build app
        uses: ./.github/actions/build_farcaster

      - name: Upload JS source maps to Datadog
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload apps/farcaster/.next/static       \
            --service=farcaster                              \
            --release-version=${{ steps.get_build_id.outputs.build_id }}  \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static

  deploy-production:
    name: Deploy ${{ matrix.name }}
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [upload-docker, upload-static-assets]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: Farcaster App
            stack: prd-farcaster
            ebextensions: .ebextensions_farcaster
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x
        with:
          short-length: 7

      # we need to bring back node_modules which includes tsconfig-paths which is used by CDK files
      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' ${{ matrix.ebextensions }}/00_env_vars.config
            rm -rf .ebextensions && mv ${{ matrix.ebextensions }} .ebextensions

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package and deploy
        run: |
          cat files_to_zip.txt | zip --symlinks -r@ ${{ matrix.stack }}.zip
          npx aws-cdk deploy --method=direct -c name=${{ matrix.stack }}

  deploy-staging:
    name: Deploy to staging
    if: |
      (github.ref == 'refs/heads/main' && !(failure() || cancelled())) ||
      (github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy-farcaster') ||
      (github.event.action != 'labeled' && (contains(github.event.pull_request.labels.*.name, ':rocket: deploy-farcaster')))

    runs-on: ubuntu-latest
    # prevent workflows running in parallel
    concurrency: deploy-staging-${{ github.head_ref }}
    needs: [upload-docker]
    steps:
      - uses: actions/checkout@v4

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x
        with:
          short-length: 7

      - name: Calculate Stage env var
        run: |
          full_stage_name="stg-farcaster-${{ github.event.number }}-${{ env.GITHUB_HEAD_REF_SLUG }}"

          # sanitize and trim string so that it can be used as a valid subdomain. Includes removing hyphens at the start and end of the name
          stage_name=`echo "$full_stage_name" | sed -E -e 's/[^a-zA-Z0-9-]+//g' -e 's/(.{40}).*/\1/' -e 's/^-/0/' -e 's/-$/0/'`

          # export the stage name so that it can be used in other steps
          echo "STAGE_NAME=$stage_name" >> $GITHUB_ENV

      # we need to bring back node_modules which includes tsconfig-paths which is used by CDK files
      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Replace env_var with staging settings
        run: |
          ebextension_files=$(ls .ebextensions*/00_env_vars.config)
          ebstalk_apps_env_files=$(ls .ebstalk.apps.env/*)

          for conf_file in $ebextension_files $ebstalk_apps_env_files; do
            sed -i 's/prd/stg/g' $conf_file
            sed -i 's/production/staging/g' $conf_file
          done

          # modifying cloudformation alarm to send alerts to test sns topic.
          #  leaving it in even if we're deleting the config before deploying
          #  Useful to avoid accidental triggering to system-status channel.
          for conf_file in .ebextensions*/06_cloudwatch_alarm.config; do
            sed -i 's/Production-Alerts/lambda-test-debug/g' $conf_file
          done

          rm .ebextensions*/06_cloudwatch_alarm.config

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .COMPOSE_PROJECT_NAME = "pr${{ github.event.number }}" |
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_farcaster/00_env_vars.config

      - name: Override config with Farcaster app
        run: |
          rm -rf .ebextensions && mv .ebextensions_farcaster .ebextensions

      - name: Parse compose profile to see if we need to enable datadog
        id: get_compose_profiles
        uses: mikefarah/yq@master
        with:
          cmd: yq -r '.option_settings."aws:elasticbeanstalk:application:environment".COMPOSE_PROFILES' .ebextensions/00_env_vars.config

      - name: Set DDENABLED variable in environment for build and deploy steps
        run: |
          cat  .ebextensions/00_env_vars.config
          COMPOSE_PROFILES=${{ steps.get_compose_profiles.outputs.result }}
          if [[ "$COMPOSE_PROFILES" =~ ddtst ]]; then
            echo "DDENABLED=true" >> $GITHUB_ENV
          fi

      - name: Create a github deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE_NAME }}
          ref: ${{ github.head_ref }}
          override: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to staging
        id: cdk_deploy
        run: |
          cat files_to_zip.txt | zip --symlinks -r@ ${{env.STAGE_NAME}}.zip
          npx aws-cdk deploy -c name=${{env.STAGE_NAME}} --method=direct --outputs-file cdk.out.json
          env_url=$(jq --raw-output '.[$ENV.STAGE_NAME].DeploymentUrl' ./cdk.out.json)
          echo "env_url=$env_url" >> $GITHUB_OUTPUT

      - name: update the github deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          env: ${{ steps.deployment.outputs.env }}
          step: finish
          override: false
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.cdk_deploy.outputs.env_url }}

  discord-alert:
    name: Notify Discord of failure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    # pass in all steps so we can check if any failed
    needs: [build-app, upload-docker, deploy-production]
    steps:
      - name: If any of prev jobs failed notify discord
        if: contains(needs.*.result, 'failure')
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
          status: 'failure'
          content: 'Hey <@&1027309276454207519>'
          title: 'Farcaster deploy workflow failed'
          description: |
            Failed workflow URL: https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}
          color: '16515843'
          url: 'https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}'
          username: GitHub Actions
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
