# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [main]
    paths:
      - '.ebextensions*'
      - '.ebstalk.apps.env'
      - '.github'
      - 'apps/connect/**'
      - 'apps/sunnyawards/**'
      - '@connect-shared/**'
      - 'abis/**'
      - 'adapters/**'
      - 'config/**'
      - 'connectors/**'
      - 'lib/**'
      - 'hooks/**'
      - 'models/**'
  pull_request:
    branches: ['**']
    paths:
      - '.ebextensions*'
      - '.ebstalk.apps.env'
      - '.github'
      - 'apps/connect/**'
      - '@connect-shared/**'
      - 'abis/**'
      - 'adapters/**'
      - 'config/**'
      - 'connectors/**'
      - 'lib/**'
      - 'hooks/**'
      - 'models/**'
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version to update to'
        required: true

concurrency:
  group: ci-connect-${{ github.event_name }}-${{ github.ref }}

jobs:
  build-app:
    name: Build app
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get_head_commit_message.outputs.commit_message }}
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          commit_core_pkg_upgrade: true
          save_cache: true

      - name: Build app
        uses: ./.github/actions/build_connect

      # source https://github.com/orgs/community/discussions/28474
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "commit_message=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"

  test-connect:
    name: Test Connect apps
    runs-on: ubuntu-latest
    needs: build-app
    if: ${{ !contains(needs.build-app.outputs.head-commit-message, 'skip-tests') }}
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Restore app from cache
        uses: ./.github/actions/build_connect

      - name: Validate Webapp
        run: |
          npm run lint -w apps/connect
          npm run typecheck -w apps/connect

      - name: Validate Connect API
        run: |
          npm run lint -w apps/connect-api

      # We need to fix jest transpilation before we can run connect API tests
      # - name: 'Test Connect API'
      #   run: 'npm run connect-api:test'

      - name: Validate Sunny Awards
        run: |
          npm run lint -w apps/sunnyawards
          npm run typecheck -w apps/sunnyawards

  test-connect-e2e:
    name: Test Connect App E2E
    runs-on: ubuntu-latest
    needs: build-app
    if: ${{ !contains(needs.build-app.outputs.head-commit-message, 'skip-tests') }}
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Restore app from cache
        uses: ./.github/actions/build_connect

      - name: Start connect app
        run: |
          npm run connect:start:test:ci &
          sleep_loop_ct=0
          until curl localhost:3337/api/health || [[ $sleep_loop_ct > 30 ]]; do
            echo "webapp not up in loop $sleep_loop_ct ... sleeping"
            sleep_loop_ct=$((sleep_loop_ct + 1))
            sleep 1
          done

      - name: Run Connect E2E tests
        env:
          REACT_APP_APP_ENV: 'test'
        # we have to run docker command ourselves to set network=host so that playwright can access the server
        run: |
          docker run --name  mcrmicrosoftcomplaywrightv1343jammy_68c205 \
                      --workdir /github/workspace --rm  \
                      -e "REACT_APP_APP_ENV" -e CI=true \
                      -v "/var/run/docker.sock":"/var/run/docker.sock" \
                      -v "/home/runner/work/_temp/_github_home":"/github/home" \
                      -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
                      -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
                      -v "/home/runner/work/app.charmverse.io/app.charmverse.io":"/github/workspace" \
                      --network "host"  \
                      --ipc=host \
                      mcr.microsoft.com/playwright:v1.42.1-jammy \
                      npm run connect:test:e2e:ci

  test-sunnyawards-e2e:
    name: Test Sunny Awards E2E
    runs-on: ubuntu-latest
    needs: build-app
    if: ${{ !contains(needs.build-app.outputs.head-commit-message, 'skip-tests') }}
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Restore app from cache
        uses: ./.github/actions/build_connect

      - name: Start Sunny Awards app
        run: |
          npm run sunnyawards:start:test:ci &
          sleep_loop_ct=0
          until curl localhost:3337/api/health || [[ $sleep_loop_ct > 30 ]]; do
            echo "webapp not up in loop $sleep_loop_ct ... sleeping"
            sleep_loop_ct=$((sleep_loop_ct + 1))
            sleep 1
          done

      - name: Run Sunny Awards E2E tests
        env:
          REACT_APP_APP_ENV: 'test'
        # we have to run docker command ourselves to set network=host so that playwright can access the server
        run: |
          docker run --name  mcrmicrosoftcomplaywrightv1343jammy_68c205 \
                      --workdir /github/workspace --rm  \
                      -e "REACT_APP_APP_ENV" -e CI=true \
                      -v "/var/run/docker.sock":"/var/run/docker.sock" \
                      -v "/home/runner/work/_temp/_github_home":"/github/home" \
                      -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
                      -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
                      -v "/home/runner/work/app.charmverse.io/app.charmverse.io":"/github/workspace" \
                      --network "host"  \
                      --ipc=host \
                      mcr.microsoft.com/playwright:v1.42.1-jammy \
                      npm run sunnyawards:test:e2e:ci

  deploy-docker:
    name: Upload Docker image and assets
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref != 'refs/heads/main' && !(failure() || cancelled())
    needs: build-app
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build_connect

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: charmverse-web3-workspace

  upload-static-assets:
    name: Upload Docker image and assets
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref != 'refs/heads/main' && !(failure() || cancelled())
    needs: build-app
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Calculate Build ID
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'pages/api/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Build app
        uses: ./.github/actions/build_connect
        with:
          REACT_APP_APP_ENV: 'production'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload static assets to S3
        run: |
          aws s3 sync apps/connect/.next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Upload JS source maps to Datadog
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload apps/connect/.next/static       \
            --service=connect                              \
            --release-version=${{ steps.get_build_id.outputs.build_id }}  \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static

  deploy-connect:
    name: Deploy Connect Webapp
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [test-connect, 'test-connect-e2e', deploy-docker]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_connect/00_env_vars.config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package and deploy
        run: |
          rm -rf .ebextensions && mv .ebextensions_connect .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ prd-connect.zip
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npx cdk deploy --method=direct -c name=prd-connect

  deploy-connect-api:
    name: Deploy Connect API
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [test-connect, deploy-docker]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_connect_api/00_env_vars.config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package and deploy
        run: |
          rm -rf .ebextensions && mv .ebextensions_connect_api .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ prd-connect-api.zip
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npx cdk deploy --method=direct -c name=prd-connect-api

  deploy-sunnyawards:
    name: Deploy Sunny Awards
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [test-connect, test-sunnyawards-e2e, deploy-docker]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_sunnyawards/00_env_vars.config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package and deploy
        run: |
          rm -rf .ebextensions && mv .ebextensions_sunnyawards .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ prd-sunnyawards.zip
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npx cdk deploy --method=direct -c name=prd-sunnyawards

  discord-alert:
    name: Notify Discord of failure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    # pass in all steps so we can check if any failed
    needs: [build-app, deploy-docker, deploy-connect, deploy-connect-api, deploy-sunnyawards]
    steps:
      - name: If any of prev jobs failed notify discord
        if: contains(needs.*.result, 'failure')
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
          status: 'failure'
          content: 'Hey <@&1027309276454207519>'
          title: 'Connect deploy workflow failed'
          description: |
            Failed workflow URL: https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}
          color: '16515843'
          url: 'https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}'
          username: GitHub Actions
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
