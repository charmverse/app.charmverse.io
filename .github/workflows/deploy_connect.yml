# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy Connect

on:
  pull_request:
    branches: ['**']

concurrency:
  group: connect-${{ github.event_name }}-${{ github.ref }}

jobs:
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build
        with:
          REACT_APP_APP_ENV: 'production'
          NEXT_PUBLIC_CONNECT_API_HOST: https://connect-api.charmverse.io

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: charmverse-web3-workspace

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .NODE_ENV = "production" |
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_cron/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_ceramic/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_websockets/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_connect/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_connect_api/00_env_vars.config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload static assets to S3
        run: |
          aws s3 sync .next/static/ s3://charm.cdn/webapp-assets/_next/static/
          aws s3 sync apps/connect/.next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Package Connect API
        run: |
          rm -rf .ebextensions && mv .ebextensions_connect_api .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ prd-connect-api.zip

      - name: Deploy Connect API to production
        run: |
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npx cdk deploy -c stack=prd-connect -c name=prd-connect-api

      - name: Package Connect App
        run: |
          rm -rf .ebextensions && mv .ebextensions_connect .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ prd-connect.zip

      - name: Deploy Connect App to production
        run: |
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npx cdk deploy -c stack=prd-connect -c name=prd-connect
