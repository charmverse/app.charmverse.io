name: 'Deploy Connect app to staging'

on:
  pull_request:
    types: [labeled, opened, synchronize]

env:
  SELECTED_PERMISSION_API_TAG: latest

concurrency:
  group: staging-${{ github.ref }}

jobs:
  deploy:
    if: |
      (github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy-connect') ||
      (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, ':rocket: deploy-connect'))
    runs-on: ubuntu-latest
    # prevent workflows running in parallel
    concurrency: deploy-pr-app-${{ github.head_ref }}
    steps:
      - uses: actions/checkout@v4

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Calculate Build ID and Stage env var
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'apps/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

          echo "STAGE=pr-${{ github.event.number }}-${{ env.GITHUB_HEAD_REF_SLUG }}" >> $GITHUB_ENV

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build_connect
        with:
          REACT_APP_APP_ENV: 'staging'

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: charmverse-web3-workspace

      - name: Replace env_var with staging settings
        run: |
          ebextension_files=$(ls .ebextensions*/00_env_vars.config)
          ebstalk_apps_env_files=$(ls .ebstalk.apps.env/*)

          for conf_file in $ebextension_files $ebstalk_apps_env_files; do
            sed -i 's/prd/stg/g' $conf_file
            sed -i 's/production/staging/g' $conf_file
          done

          # modifying cloudformation alarm to send alerts to test sns topic.
          #  leaving it in even if we're deleting the config before deploying
          #  Useful to avoid accidental triggering to system-status channel.
          for conf_file in .ebextensions*/06_cloudwatch_alarm.config; do
            sed -i 's/Production-Alerts/lambda-test-debug/g' $conf_file
          done

          rm .ebextensions*/06_cloudwatch_alarm.config

          # substituting the API domain name
          sed -i 's/REACT_APP_CONNECT_API_HOST=.*/REACT_APP_CONNECT_API_HOST=https:\/\/${{env.STAGE}}.charmverse.co:3333/g' .ebstalk.apps.env/connect.env

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .COMPOSE_PROJECT_NAME = "pr${{ github.event.number }}" |
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_connect/00_env_vars.config

      - name: Parse compose profile to see if we need to enable datadog
        id: get_compose_profiles
        uses: mikefarah/yq@master
        with:
          cmd: yq -r '.option_settings."aws:elasticbeanstalk:application:environment".COMPOSE_PROFILES' .ebextensions_connect/00_env_vars.config

      - name: Set DDENABLED variable in environment for build and deploy steps
        run: |
          cat  .ebextensions_connect/00_env_vars.config
          COMPOSE_PROFILES=${{ steps.get_compose_profiles.outputs.result }}
          if [[ "$COMPOSE_PROFILES" =~ ddtst ]]; then
            echo "DDENABLED=true" >> $GITHUB_ENV
          fi

      - name: Create a github deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE }}
          ref: ${{ github.head_ref }}
          override: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package
        run: |
          rm -rf .ebextensions && mv .ebextensions_connect .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy.zip
          aws s3 sync apps/connect/.next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Deploy to staging
        id: cdk_deploy
        run: |
          npm install aws-cdk aws-cdk-lib --no-audit --no-fund --force
          npm run deploy:staging

      - name: update the github deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          env: ${{ steps.deployment.outputs.env }}
          step: finish
          override: false
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.cdk_deploy.outputs.env_url }}

      - name: Use datadog ci package to upload js maps
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install @datadog/datadog-ci --force
          npx datadog-ci sourcemaps upload .next/static  \
            --service=connect                             \
            --release-version=${{ steps.docker_build_push.outputs.img_tag }}  \
            --minified-path-prefix=${{ steps.cdk_deploy.outputs.env_url }}_next/static
