# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version to update to'
        required: true

concurrency:
  group: ci-${{ github.event_name }}-${{ github.ref }}

env:
  SELECTED_PERMISSION_API_TAG: latest

jobs:
  build-test-env:
    name: Build test env
    runs-on: ubuntu-latest
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          save_cache: true

      - name: Build app
        uses: ./.github/actions/build
        with:
          save_cache: true

  test:
    name: Validate code
    runs-on: ubuntu-latest
    needs: build-test-env
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore dependencies from cache
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}

      - name: Restore app from cache
        uses: ./.github/actions/build

      - run: npm run typecheck
      - run: npm run lint
      - run: npm run verifydeps

  integration-test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build-test-env
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        include:
          - test_name: 'Basic tests #1'
            test_command: 'npm run test:ci -- --shard 1/4'
          - test_name: 'Basic tests #2'
            test_command: 'npm run test:ci -- --shard 2/4'
          - test_name: 'Basic tests #3'
            test_command: 'npm run test:ci -- --shard 3/4'
          - test_name: 'Basic tests #4'
            test_command: 'npm run test:ci -- --shard 4/4'
          - test_name: 'Server integration tests #1'
            test_command: 'npm run start:test:ci & npm run test:server:ci -- --shard 1/3'
          - test_name: 'Server integration tests #2'
            test_command: 'npm run start:test:ci & npm run test:server:ci -- --shard 2/3'
          - test_name: 'Server integration tests #3'
            test_command: 'npm run start:test:ci & npm run test:server:ci -- --shard 3/3'
          - test_name: 'Browser tests'
            test_command: 'npm run test:browser:ci'
          - test_name: 'Browser e2e test #1'
            test_command: 'npx playwright install chromium chrome --with-deps; npm run start:test:ci & npm run test:e2e:ci -- --shard=1/2'
          - test_name: 'Browser e2e test #2'
            test_command: 'npx playwright install chromium chrome --with-deps; npm run start:test:ci & npm run test:e2e:ci -- --shard=2/2'
          - test_name: 'Serverless tests'
            test_command: 'npm run serverless:start & sleep 10 && npm run test:serverless'

    steps:
      - uses: actions/checkout@v3

      - name: Restore dependencies from cache
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          mask-aws-account-id: 'no'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Run permissions api docker image
        id: run_permissions_api
        run: |
          docker inspect postgres
          docker network ls
          cat /etc/hosts
          echo "network ${{ job.services.postgres.network }}"
          docker run -d --name permissions-api  \
                     -h permissions-api \
                     -p "3001:3001"     \
                     -e HOST=0.0.0.0    \
                     -e PORT=3001       \
                     -v $PWD/nodes_modules/@charmverse/core:/apps/node_modules/@charmverse/core \
                     --network "${{ job.services.postgres.network }}"  \
                     -e DATABASE_URL=postgres://postgres:postgres@postgres:5432/charmversetest  \
                     ${{ steps.login-ecr.outputs.registry }}/charmverse-permissions-api:${{ env.SELECTED_PERMISSION_API_TAG }} \
                     node --experimental-specifier-resolution=node ./dist/main.js

          sleep_loop_ct=0
          until curl localhost:3001/api/health || [[ $sleep_loop_ct > 30 ]]; do
            docker ps
            docker logs permissions-api
            docker inspect permissions-api
            echo "permission api not up in loop $sleep_loop_ct ... sleeping"
            sleep_loop_ct=$((sleep_loop_ct + 1))
            sleep 10
          done

      - name: Restore app from cache
        uses: ./.github/actions/build

      - name: Run ${{matrix.test_name}}
        env:
          REACT_APP_APP_ENV: 'test'
        run: ${{matrix.test_command}}

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    # Re-enable condition before merge
    if: github.ref == 'refs/heads/main'
    needs: [test, integration-test]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          commit_core_pkg_upgrade: true

      - name: Calculate Build ID and add to env file
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'pages/api/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "REACT_APP_BUILD_ID=$build_id" >> ./.ebstalk.apps.env/webapp.env

      - name: Build app
        uses: ./.github/actions/build
        with:
          REACT_APP_APP_ENV: 'production'

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .NODE_ENV = "production" |
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_cron/00_env_vars.config

            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions_websockets/00_env_vars.config

      - name: Package Webapp and upload web assets to s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          cat files_to_zip.txt | zip --symlinks -r@ deploy.zip
          aws s3 sync .next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Update and Package background worker
        run: |
          rm -rf .ebextensions && mv .ebextensions_cron .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy_cron.zip

      - name: Update and Package websockets
        id: pkg_websocket
        run: |
          rm -rf .ebextensions && mv .ebextensions_websockets .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy_websockets.zip

          changed_files=$(git diff --name-only ${{github.event.before}} ${{github.event.after}})
          websocket_src_file_pattern='^(background/|config/|[dD]ocker|esbuild|lib/|package|next|tsconfig|components/common/CharmEditor/components)+'
          for file in $changed_files; do
            echo "evaluating $file:"
            if [[ $file =~ $websocket_src_file_pattern ]]; then
              echo "Requires deployment to websocket"
              echo "deploy_websocket=true" >> $GITHUB_OUTPUT
              break
            fi
          done

      - name: Deploy webapp to Beanstalk
        id: webapp_deploy
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: web3-workspace
          environment_name: prd-charmverse-webapp
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy.zip
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: false # set to false to save sweet Github minutes

      - name: Use datadog ci package to upload js maps
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload .next/static       \
            --service=webapp                              \
            --release-version=${{ steps.get_build_id.outputs.build_id }}  \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static

      - name: Deploy Background to Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: charmverse-worker
          environment_name: prd-charmverse-worker
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy_cron.zip
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: false # set to false to save sweet Github minutes

      - name: Deploy Websockets to Beanstalk
        if: steps.pkg_websocket.outputs.deploy_websocket == 'true'
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: prd-charmverse-websockets
          environment_name: prd-charmverse-websockets
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy_websockets.zip
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: false # set to false to save sweet Github

  #    if: github.ref == 'refs/heads/main' && failure()
  discord_alert:
    name: Notify discord of failure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    needs: [build-test-env, test, integration-test, deploy]
    steps:
      - name: If any of prev jobs failed notify discord
        if: contains(needs.*.result, 'failure')
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
          status: 'failure'
          content: 'Hey <@&1027309276454207519>'
          title: 'Webapp deploy workflow failed'
          description: |
            Failed workflow URL: https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}
          color: '16515843'
          url: 'https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}'
          username: GitHub Actions
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
