# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies and build app
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build

      - name: Setup test database
        run: bash ./scripts/configure-db.sh

      - name: Run basic tests
        run: npm run test:ci

      - name: Run server integration tests
        run: |
          npm run start:test:ci &
          npm run test:server:ci

      - name: Run browser tests
        run: npm run test:browser:ci

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies and build app
        uses: ./.github/actions/install

      - name: Build app
        uses: ./.github/actions/build

      - name: Remove dev dependencies
        run: |
          npm prune --production
          rm -rf .next/cache

      - name: Add Datadog API Key
        run: |
          sed -i 's/{API_KEY}/${{ secrets.DATADOG_API_KEY }}/g' .ebextensions/99_datadog.config
          sed -i 's/{API_KEY}/${{ secrets.DATADOG_API_KEY }}/g' .ebextensions_cron/99_datadog.config

      - name: Configure Docker npm command
        run: sed -i 's/{DOCKER_NPM_COMMAND}/start:prod/g' .ebextensions/00_env_vars.config

      - name: Package
        run: cat files_to_zip.txt | zip --symlinks -r@ deploy.zip

      - name: Update and Package background worker
        run: |
          rm -rf .ebextensions && mv .ebextensions_cron .ebextensions
          cat files_to_zip.txt | zip --symlinks -r@ deploy_cron.zip

      - name: Deploy to Beanstalk
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: web3-workspace
          environment_name: web3-workspace-production
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy.zip
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: false # set to false to save sweet Github minutes

      - name: Deploy Background to Beanstalk
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: charmverse-worker
          environment_name: charmverse-worker-production
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy_cron.zip
          use_existing_version_if_available: true # allows triggering re-deploys with same version
          wait_for_deployment: false # set to false to save sweet Github minutes
