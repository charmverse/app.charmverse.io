name: Waitlist CI

on:
  push:
    branches: [main]
    paths:
      - '.cdk/**'
      - '.ebextensions/waitlist/**'
      - '.ebstalk.apps.env/waitlist.env'
      - '.github/actions/**'
      - '.github/workflows/deploy_waitlist.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/waitlist/**'
      - 'packages/github/**'
      - '@connect-shared/**'
      - 'abis/**'
      - 'adapters/**'
      - 'config/**'
      - 'connectors/**'
      - 'lib/**'
      - 'hooks/**'
  pull_request:
    types: [labeled, opened, synchronize]
    branches: ['**']
    paths:
      - '.cdk/**'
      - '.ebextensions/waitlist/**'
      - '.ebstalk.apps.env/waitlist.env'
      - '.github/actions/**'
      - '.github/workflows/deploy_waitlist.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'apps/waitlist/**'
      - 'packages/github/**'
      - '@connect-shared/**'
      - 'abis/**'
      - 'adapters/**'
      - 'config/**'
      - 'connectors/**'
      - 'lib/**'
      - 'hooks/**'
  workflow_dispatch:
    inputs:
      core_pkg_version:
        description: 'Core pkg version to update to'
        required: true

concurrency:
  group: ci-waitlist-${{ github.event_name }}-${{ github.ref }}

jobs:
  build:
    name: Build apps
    runs-on: ubuntu-latest
    outputs:
      head_commit_message: ${{ steps.setup_variables.outputs.commit_message }}
      deploy_staging: ${{ steps.setup_variables.outputs.deploy_staging }}
      skip_tests: ${{ steps.setup_variables.outputs.skip_tests }}
    steps:
      - name: Print Triggering event context payload
        env:
          workflow_event_context: ${{ toJSON(github.event) }}
        run: |
          echo "$workflow_event_context"
          echo "Workflow and code ref: ${{github.ref}}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup variables
        id: setup_variables
        # source https://github.com/orgs/community/discussions/28474
        run: |
          echo "commit_message=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"
          echo "deploy_staging=${{(github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy-waitlist') || (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, ':rocket: deploy-waitlist'))}}" >> $GITHUB_OUTPUT
          echo "skip_tests=${{ contains(env.commit_message, 'skip-tests') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        uses: ./.github/actions/install
        with:
          core_pkg_version: ${{ inputs.core_pkg_version }}
          commit_core_pkg_upgrade: true

      - name: Build app
        uses: ./.github/actions/build_app
        with:
          app_name: waitlist

  test-waitlist:
    name: Test apps
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.action != 'labeled' && needs.build.outputs.skip_tests != 'true' }}
    # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore dependencies from cache
        uses: ./.github/actions/install

      - name: Setup test database
        run: npx dotenv -e .env.test.local -- npm run prisma:reset

      - name: Restore app from cache
        uses: ./.github/actions/build_app
        with:
          app_name: waitlist

      - name: Typecheck Waitlist app
        run: npm run typecheck -w apps/waitlist

      - name: Run Waitlist Unit tests
        run: npx dotenv -e .env.test.local -- npm run test -w apps/waitlist

      - name: Run eslint on changed files
        uses: tj-actions/eslint-changed-files@v25
        with:
          skip_annotations: 'true' # do not annotate code in the PR
          file_extensions: '**/*.{ts,tsx}'

  test-waitlist-e2e:
    name: Test waitlist e2e
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Skip e2e tests
        run: 'echo "skipping e2e tests"'

    # if: ${{ github.event.action != 'labeled' && needs.build.outputs.skip_tests != 'true' }}
    # # Postgres setup copied from https://gist.github.com/2color/537f8ef13ecec80059abb007839a6878
    # services:
    #   postgres:
    #     image: postgres
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #       --hostname postgres
    #     ports:
    #       # Maps tcp port 5432 on service container to the host
    #       - 5432:5432

    # steps:
    #   - uses: actions/checkout@v4
    #     with:
    #       fetch-depth: 0

    #   - name: Restore dependencies from cache
    #     uses: ./.github/actions/install

    #   - name: Setup test database
    #     run: npx dotenv -e .env.test.local -- npm run prisma:reset

    #   - name: Restore app from cache
    #     uses: ./.github/actions/build_app
    #     with:
    #       app_name: waitlist

    #   - name: Start waitlist app
    #     run: |
    #       npm run waitlist:start:test:ci &> server.log &
    #       sleep_loop_ct=0
    #       until curl localhost:3337/api/health || [[ $sleep_loop_ct > 30 ]]; do
    #         echo "webapp not up in loop $sleep_loop_ct ... sleeping"
    #         sleep_loop_ct=$((sleep_loop_ct + 1))
    #         sleep 1
    #       done

    #   - name: Run waitlist E2E tests
    #     env:
    #       REACT_APP_APP_ENV: 'test'
    #     # we have to run docker command ourselves to set network=host so that playwright can access the server
    #     run: |
    #       [[ "${{ runner.debug }}" = "1" ]] && tail -f server.log &
    #       docker run --name  mcrmicrosoftcomplaywrightv1343jammy_68c205 \
    #                   --workdir /github/workspace --rm  \
    #                   -e "REACT_APP_APP_ENV" -e CI=true \
    #                   -v "/var/run/docker.sock":"/var/run/docker.sock" \
    #                   -v "/home/runner/work/_temp/_github_home":"/github/home" \
    #                   -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
    #                   -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
    #                   -v "/home/runner/work/app.charmverse.io/app.charmverse.io":"/github/workspace" \
    #                   --network "host"  \
    #                   --ipc=host \
    #                   mcr.microsoft.com/playwright:v1.42.1-jammy \
    #                   npm run waitlist:test:e2e:ci

  upload-docker:
    name: Upload Docker image
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: |
      github.ref == 'refs/heads/main' || needs.build.outputs.deploy_staging == 'true'
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Restore app from cache
        uses: ./.github/actions/build_app
        with:
          app_name: waitlist

      - name: Update Dockerfile
        run: |
          rm Dockerfile && mv apps/waitlist/Dockerfile Dockerfile

      - name: Build and Push Docker image
        id: docker_build_push
        uses: ./.github/actions/build_docker_image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        with:
          ecr_registry: waitlist

  upload-static-assets:
    name: Upload assets in production
    runs-on: ubuntu-latest
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Calculate Build ID
        id: get_build_id
        run: |
          build_id=${{ hashFiles('package-lock.json', 'apps/**/*.[jt]s', 'lib/**/*.[jt]s') }}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Restore app from cache
        uses: ./.github/actions/build_app
        with:
          app_name: waitlist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload static assets to S3
        run: |
          aws s3 sync apps/waitlist/.next/static/ s3://charm.cdn/webapp-assets/_next/static/

      - name: Upload JS source maps to Datadog
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci sourcemaps upload apps/waitlist/.next/static       \
            --service=waitlist                              \
            --release-version=${{ steps.get_build_id.outputs.build_id }}  \
            --minified-path-prefix=https://cdn.charmverse.io/_next/static

  deploy-production:
    name: Deploy to production
    # run whether previous jobs were successful or skipped
    if: github.ref == 'refs/heads/main' && !(failure() || cancelled())
    needs: [test-waitlist, test-waitlist-e2e, upload-docker, upload-static-assets]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - stack: prd-waitlist
            ebextensions: waitlist
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x
        with:
          short-length: 7

      # we need to bring back node_modules which includes tsconfig-paths which is used by CDK files
      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            mv .ebextensions .ebextensions_tmp && mv .ebextensions_tmp/${{ matrix.ebextensions }} .ebextensions
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions/00_env_vars.config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package and deploy
        run: |
          cat files_to_zip.txt | zip --symlinks -r@ ${{ matrix.stack }}.zip
          npx aws-cdk deploy --method=direct -c name=${{ matrix.stack }}

  deploy-staging:
    name: Deploy to staging
    if: needs.build.outputs.deploy_staging == 'true'

    runs-on: ubuntu-latest
    # prevent staging deploys + cleanup running in parallel
    concurrency: staging-${{ github.ref }}
    needs: [build, upload-docker]
    steps:
      - uses: actions/checkout@v4

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x
        with:
          short-length: 7

      - name: Calculate Stage env var
        run: |
          full_stage_name="stg-waitlist-${{ github.event.number }}-${{ env.GITHUB_HEAD_REF_SLUG }}"

          # sanitize and trim string so that it can be used as a valid subdomain. Includes removing hyphens at the start and end of the name
          stage_name=`echo "$full_stage_name" | sed -E -e 's/[^a-zA-Z0-9-]+//g' -e 's/(.{40}).*/\1/' -e 's/^-/0/' -e 's/-$/0/'`

          # export the stage name so that it can be used in other steps
          echo "STAGE_NAME=$stage_name" >> $GITHUB_ENV

      # we need to bring back node_modules which includes tsconfig-paths which is used by CDK files
      - name: Install dependencies
        uses: ./.github/actions/install

      - name: Replace env_var with staging settings
        run: |
          ebextension_files=$(ls .ebextensions/*/00_env_vars.config)
          ebstalk_apps_env_files=$(ls .ebstalk.apps.env/*)

          for conf_file in $ebextension_files $ebstalk_apps_env_files; do
            sed -i 's/prd/stg/g' $conf_file
            sed -i 's/production/staging/g' $conf_file
          done

          # modifying cloudformation alarm to send alerts to test sns topic.
          #  leaving it in even if we're deleting the config before deploying
          #  Useful to avoid accidental triggering to system-status channel.
          for conf_file in .ebextensions/*/06_cloudwatch_alarm.config; do
            sed -i 's/Production-Alerts/lambda-test-debug/g' $conf_file
          done

          rm .ebextensions/*/06_cloudwatch_alarm.config

      - name: Create a github deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE_NAME }}
          ref: ${{ github.head_ref }}
          override: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set the docker compose env variables
        uses: mikefarah/yq@master
        with:
          cmd: |
            mv .ebextensions .ebextensions_tmp && mv .ebextensions_tmp/waitlist .ebextensions
            yq -I 4 -i '
              with(.option_settings."aws:elasticbeanstalk:application:environment";
                    .COMPOSE_PROJECT_NAME = "pr${{ github.event.number }}" |
                    .IMGTAG = "${{ github.run_id }}-${{ env.GITHUB_SHA_SHORT }}")
              ' .ebextensions/00_env_vars.config

      - name: Deploy to staging
        id: cdk_deploy
        run: |
          cat files_to_zip.txt | zip --symlinks -r@ ${{env.STAGE_NAME}}.zip
          npx aws-cdk deploy -c name=${{env.STAGE_NAME}} --method=direct --outputs-file cdk.out.json
          env_url=$(jq --raw-output '.[$ENV.STAGE_NAME].DeploymentUrl' ./cdk.out.json)
          echo "env_url=$env_url" >> $GITHUB_OUTPUT

      - name: update the github deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          env: ${{ steps.deployment.outputs.env }}
          step: finish
          override: false
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.cdk_deploy.outputs.env_url }}

  discord-alert:
    name: Notify Discord of failure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    # pass in all steps so we can check if any failed
    needs: [test-waitlist, test-waitlist-e2e, upload-docker, upload-static-assets, upload-docker, deploy-production]
    steps:
      - name: If any of prev jobs failed notify discord
        if: contains(needs.*.result, 'failure')
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WARNINGS_WEBHOOK }}
          status: 'failure'
          content: 'Hey <@&1027309276454207519>'
          title: 'waitlist deploy workflow failed'
          description: |
            Failed workflow URL: https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}
          color: '16515843'
          url: 'https://github.com/charmverse/app.charmverse.io/actions/runs/${{ github.run_id }}'
          username: GitHub Actions
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
