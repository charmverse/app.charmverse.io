name: "Install dependencies"

inputs:
  core_pkg_version:
    description: "Optional. Defaults to what's in package.json. Valid options are latest and custom version"
    required: false
  commit_core_pkg_upgrade:
    description: "Whether commit the update to core package back to branch"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Create .env.test.local file
      shell: bash
      run: cp .env.test.local.example .env.test.local

    - name: Cache dependencies
      id: cache_node_modules
      uses: actions/cache@v3
      with:
        path: ./node_modules
        key: nodemodules-cache-${{ hashFiles('package-lock.json') }}-${{ hashFiles('patches/**.patch', 'prisma/schema.prisma') }}

    - name: Install npm dependencies
      shell: bash
      if: steps.cache_node_modules.outputs.cache-hit != 'true'
      run: npm ci --no-audit --no-fund

    # If installing specific version of core via npmjs 
    - name: Upgrade Core package to version ${{ inputs.core_pkg_version }}
      shell: bash
      if: inputs.core_pkg_version
      run: |
        npm install @charmverse/core@${{ inputs.core_pkg_version }}

    # Only done on push event with main branch. Commits pkg upgrade back to main
    - name: Commit package and lock file back into repo
      if: (github.ref == 'refs/heads/main') && inputs.core_pkg_version && inputs.commit_core_pkg_upgrade
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        file_pattern: "package*.json"
        commit_message: "Github action: automated Core pk upgrade to ${{ inputs.core_pkg_version }}"

    # If installing core via github branch
    - name: Install custom core branch
      shell: bash
      if: inputs.use_github_core_branch && github.head_ref == inputs.use_github_core_branch
      run: |
        npm install github:charmverse/core#${{inputs.use_github_core_branch}}
        cd node_modules/@charmverse/core
        npm run build

        cat package.json | jq '.version'
        cat src/prisma/schema.prisma | egrep "^///" || true

