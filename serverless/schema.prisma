generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["debian-openssl-1.1.x", "linux-musl", "darwin", "native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionLevel {
  full_access
  editor
  view_comment
  view
}

enum SpacePermissionConfigurationMode {
  custom
  readOnly
  collaborative
  open
}

enum IdentityType {
  Wallet
  Discord
  Telegram
  RandomName
  UnstoppableDomain
  Google
  VerifiedEmail
}

enum VoteStatus {
  InProgress
  Passed
  Rejected
  Cancelled
}

enum VoteType {
  Approval
  SingleChoice
  MultiChoice
}

enum NotificationChannel {
  email
  webapp
}

enum NotificationType {
  multisig
  mention
  vote
  proposal
  bounty
  post_comment
  page_comment
  forum
}

enum BountyStatus {
  suggestion
  open
  inProgress
  complete
  paid
}

enum BountyOperation {
  work
  review
  lock
  approve_applications
  grant_permissions
  mark_paid
}

enum BountyPermissionLevel {
  reviewer
  creator
  submitter
}

enum ApplicationStatus {
  applied
  inProgress
  review
  rejected
  processing
  complete
  paid
  cancelled
}

enum WalletType {
  metamask
  gnosis
}

enum RoleSource {
  guild_xyz
  collabland
  summon
}

enum PagePermissionLevel {
  full_access
  proposal_editor
  editor
  view_comment
  view
  custom
}

enum PageOperations {
  read
  delete
  edit_position
  edit_content
  edit_isPublic
  edit_path
  grant_permissions
  comment
  create_poll
  delete_attached_bounty
}

enum UserSpaceActionType {
  view_page
  app_loaded
}

enum SpaceOperation {
  createPage
  createBounty
  createForumCategory
  moderateForums
  reviewProposals
  deleteAnyPage
  deleteAnyBounty
  deleteAnyProposal
}

enum ProfileItemType {
  community
  nft
  poap
  vc
}

enum ProposalStatus {
  draft
  discussion
  review
  reviewed
  vote_active
  vote_closed
  // Separate flow
  evaluation_active
  evaluation_closed
}

enum WorkspaceEventType {
  proposal_status_change
}

enum FontFamily {
  default
  serif
  mono
}

enum PageType {
  board
  board_template
  bounty
  bounty_template
  page
  page_template
  card
  card_synced
  card_template
  proposal
  proposal_template
  inline_board
  inline_linked_board
  linked_board
}

enum VoteContext {
  inline
  proposal
}

enum MemberPropertyType {
  text
  text_multiline
  number
  email
  phone
  url
  select
  multiselect
  role
  profile_pic
  timezone
  name
  discord
  twitter
  bio
  join_date
  linked_in
  github
}

enum MemberPropertyPermissionLevel {
  view
}

enum VisibilityView {
  gallery
  table
  profile
}

enum CategorySubscriptionMode {
  whitelist
  blacklist
}

enum Feature {
  member_directory
  proposals
  forum
  bounties
}

enum ApiPageKeyType {
  typeform
}

enum SubscriptionTier {
  free
  community
  enterprise
  cancelled
}

enum SubscriptionPeriod {
  monthly
  annual
}

model Space {
  id                          String                            @id @default(uuid()) @db.Uuid
  deletedAt                   DateTime?
  createdAt                   DateTime                          @default(now())
  createdBy                   String                            @db.Uuid
  updatedAt                   DateTime                          @updatedAt
  updatedBy                   String                            @db.Uuid
  name                        String
  domain                      String                            @unique
  customDomain                String?                           @unique
  isCustomDomainVerified      Boolean?
  paidTier                    SubscriptionTier                  @default(community)
  discordServerId             String?
  defaultVotingDuration       Int?
  snapshotDomain              String?
  spaceImage                  String?
  defaultPostCategoryId       String?                           @unique @db.Uuid
  defaultPostCategory         PostCategory?                     @relation(fields: [defaultPostCategoryId], references: [id], name: "defaultPostCategory", onDelete: SetNull)
  defaultPagePermissionGroup  PagePermissionLevel?              @default(full_access)
  defaultPublicPages          Boolean?                          @default(false)
  notificationToggles         Json                              @default("{}")
  requireProposalTemplate     Boolean?                          @default(false)
  permissionConfigurationMode SpacePermissionConfigurationMode? @default(custom)
  publicBountyBoard           Boolean?                          @default(false)
  publicProposals             Boolean?                          @default(false)
  xpsEngineId                 String?                           @unique
  author                      User                              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  blocks                      Block[]
  bounties                    Bounty[]
  bountyPermissions           BountyPermission[]
  comments                    Comment[]
  inviteLinks                 InviteLink[]
  pages                       Page[]
  permissions                 PagePermission[]
  paymentMethods              PaymentMethod[]
  roles                       Role[]
  apiToken                    SpaceApiToken?
  superApiTokenId             String?                           @db.Uuid
  superApiToken               SuperApiToken?                    @relation(fields: [superApiTokenId], references: [id], onDelete: SetNull)
  permittedGroups             SpacePermission[]                 @relation("permittedGroups")
  spacePermissions            SpacePermission[]                 @relation("spacePermissions")
  spaceRoles                  SpaceRole[]
  threads                     Thread[]
  tokenGates                  TokenGate[]
  votes                       Vote[]
  proposals                   Proposal[]
  workspaceEvents             WorkspaceEvent[]
  proposalCategories          ProposalCategory[]
  memberProperties            MemberProperty[]
  memberPropertyValues        MemberPropertyValue[]
  userTokenGates              UserTokenGate[]
  postCategories              PostCategory[]
  posts                       Post[]
  postCategoryPermissions     PostCategoryPermission[]
  proposalCategoryPermissions ProposalCategoryPermission[]
  spaceNotificationSettings   UserSpaceNotificationSettings[]
  webhookSubscriptionUrl      String?
  webhookSubscriptions        WebhookSubscription[]
  webhookSigningSecret        String?
  origin                      String?
  hiddenFeatures              Feature[]
  features                    Json[]
  memberProfiles              Json[]
  stripeSubscription          StripeSubscription[]
  userActions                 UserSpaceAction[]
  postTags                    PostTag[]
  blockCounts                 BlockCount[]
  blockQuota                  Int                               @default(0)
  proposalBlocks              ProposalBlock[]
  rewardBlocks                RewardBlock[]
  userNotifications           UserNotificationMetadata[]

  @@index([createdBy])
}

model StripeSubscription {
  id             String    @id @default(uuid()) @db.Uuid
  createdAt      DateTime  @default(now())
  spaceId        String    @db.Uuid
  space          Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  customerId     String
  subscriptionId String    @unique
  deletedAt      DateTime?

  @@index([spaceId])
}

model SpaceApiToken {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  spaceId   String   @unique @db.Uuid
  token     String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([token, spaceId])
  @@index([spaceId])
}

model SuperApiToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  name      String
  spaces    Space[]

  @@unique(name)
  @@index([token])
}

model Page {
  id                  String                 @id @default(uuid()) @db.Uuid
  deletedAt           DateTime?
  createdAt           DateTime               @default(now())
  createdBy           String                 @db.Uuid
  updatedAt           DateTime               @default(now())
  updatedBy           String                 @db.Uuid
  deletedBy           String?                @db.Uuid
  title               String
  content             Json?
  contentText         String
  galleryImage        String?
  hasContent          Boolean                @default(false)
  headerImage         String?
  icon                String?
  path                String
  isTemplate          Boolean?               @default(false)
  parentId            String?                @db.Uuid
  spaceId             String                 @db.Uuid
  additionalPaths     String[]               @default([])
  type                PageType
  boardId             String?                @db.Uuid
  autoGenerated       Boolean?               @default(false)
  index               Int                    @default(-1)
  cardId              String?                @unique @db.Uuid
  proposalId          String?                @unique @db.Uuid
  snapshotProposalId  String?
  fullWidth           Boolean?               @default(false)
  fontFamily          FontFamily?            @default(default)
  fontSizeSmall       Boolean?               @default(false)
  version             Int                    @default(1)
  card                Block?                 @relation(fields: [cardId], references: [id], onDelete: Cascade)
  author              User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  space               Space                  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  inlineComments      Comment[]
  favorites           FavoritePage[]
  permissions         PagePermission[]
  bountyId            String?                @unique @db.Uuid
  bounty              Bounty?                @relation(fields: [bountyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  proposal            Proposal?              @relation(fields: [proposalId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "proposal")
  threads             Thread[]
  votes               Vote[]
  workspaceEvents     WorkspaceEvent[]
  diffs               PageDiff[]
  syncWithPageId      String?                @db.Uuid
  convertedProposalId String?                @unique @db.Uuid
  convertedProposal   Proposal?              @relation(fields: [convertedProposalId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "convertedProposal")
  comments            PageComment[]
  apiPageKeys         ApiPageKey[]
  userSpaceActions    UserSpaceAction[]
  sourceTemplateId    String?                @db.Uuid
  notifications       DocumentNotification[]

  // Ensure synced proposal databases cannot have duplicate cards for a proposal
  @@unique([parentId, syncWithPageId])
  @@index([bountyId])
  @@index([cardId])
  @@index([createdBy])
  @@index([deletedAt])
  @@index([parentId])
  @@index([proposalId])
  @@index([spaceId])
  @@index([title])
  @@index([path])
  // https://www.prisma.io/docs/concepts/components/prisma-schema/indexes#configuring-the-access-type-of-indexes-with-type-postgresql
  // https://www.postgresql.org/docs/current/indexes-types.html#INDEXES-TYPES-GIN
  @@index([additionalPaths], type: Gin)
}

model UserSpaceAction {
  id             String              @id @default(uuid()) @db.Uuid
  createdAt      DateTime            @default(now())
  createdBy      String?             @db.Uuid
  distinctUserId String?             @db.Uuid
  pageId         String?             @db.Uuid
  page           Page?               @relation(fields: [pageId], references: [id], onDelete: Cascade)
  postId         String?             @db.Uuid
  post           Post?               @relation(fields: [postId], references: [id], onDelete: Cascade)
  action         UserSpaceActionType
  meta           Json?
  pageType       String?
  user           User?               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  spaceId        String?             @db.Uuid
  space          Space?              @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([createdBy, action])
  @@index([spaceId, action])
}

model PageComment {
  id                   String                 @id @default(uuid()) @db.Uuid
  createdAt            DateTime               @default(now())
  createdBy            String                 @db.Uuid
  content              Json
  contentText          String
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  deletedBy            String?
  parentId             String?
  pageId               String                 @db.Uuid
  page                 Page                   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user                 User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  votes                PageCommentVote[]
  lensCommentLink      String?
  DocumentNotification DocumentNotification[]

  @@index([pageId])
}

model PageCommentVote {
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  upvoted   Boolean

  commentId String      @db.Uuid
  comment   PageComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([createdBy, commentId])
  @@index([commentId])
}

model PageDiff {
  data      Json
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  pageId    String   @db.Uuid
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  version   Int

  @@unique([pageId, version])
  @@index([pageId])
}

model Block {
  id                String             @id @db.Uuid
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  createdBy         String             @db.Uuid
  updatedAt         DateTime           @default(now())
  updatedBy         String             @db.Uuid
  spaceId           String             @db.Uuid
  parentId          String
  rootId            String             @db.Uuid
  schema            Int
  type              String
  title             String
  fields            Json
  user              User               @relation(fields: [createdBy], references: [id])
  space             Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  page              Page?
  cardNotifications CardNotification[] @relation("card")

  @@index([rootId])
  @@index([spaceId])
  @@index([createdBy])
}

model UserVote {
  voteId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  choices   String[] @default([])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vote      Vote     @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@unique([voteId, userId])
  @@index([voteId])
  @@index([userId])
}

model VoteOptions {
  name   String
  voteId String @db.Uuid
  vote   Vote   @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@unique([voteId, name])
  @@index([voteId])
}

model Vote {
  id            String             @id @default(uuid()) @db.Uuid
  pageId        String?            @db.Uuid
  postId        String?            @db.Uuid
  title         String
  description   String?
  content       Json?
  contentText   String?
  deadline      DateTime
  status        VoteStatus
  createdAt     DateTime           @default(now())
  createdBy     String             @db.Uuid
  spaceId       String             @db.Uuid
  threshold     Int
  maxChoices    Int?               @default(1)
  type          VoteType           @default(SingleChoice)
  context       VoteContext        @default(inline)
  author        User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  page          Page?              @relation(fields: [pageId], references: [id], onDelete: Cascade)
  post          Post?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  space         Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userVotes     UserVote[]
  voteOptions   VoteOptions[]
  notifications VoteNotification[]

  @@index([createdBy])
  @@index([pageId])
  @@index([spaceId])
}

model User {
  id                        String                          @id @default(uuid()) @db.Uuid
  createdAt                 DateTime                        @default(now())
  updatedAt                 DateTime                        @default(now())
  deletedAt                 DateTime?
  avatar                    String?
  avatarContract            String?
  avatarTokenId             String?
  avatarChain               Int?
  username                  String
  isBot                     Boolean?                        @default(false)
  path                      String                          @unique
  identityType              IdentityType?
  email                     String?
  emailNotifications        Boolean?                        @default(true)
  emailNewsletter           Boolean?                        @default(false)
  xpsEngineId               String?                         @unique
  publishToLensDefault      Boolean?                        @default(false)
  applications              Application[]
  blocks                    Block[]
  bounties                  Bounty[]
  bountyPermissions         BountyPermission[]
  comments                  Comment[]
  discordUser               DiscordUser?
  favorites                 FavoritePage[]
  inviteLinks               InviteLink[]
  posts                     Post[]
  pages                     Page[]
  permissions               PagePermission[]
  poaps                     Poap[]
  spacesCreated             Space[]
  spacePermissions          SpacePermission[]
  spaceRoles                SpaceRole[]
  spacesOrder               String[]
  telegramUser              TelegramUser?
  threads                   Thread[]
  profile                   UserDetails?
  gnosisSafes               UserGnosisSafe[]
  userNotifications         UserNotification[]
  notificationState         UserNotificationState?
  userVotes                 UserVote[]
  initiatedVotes            Vote[]
  profileItems              ProfileItem[]
  proposalsAuthored         ProposalAuthor[]
  proposalsReviewed         ProposalReviewer[]
  reviewedProposals         Proposal[]
  workspaceEvents           WorkspaceEvent[]
  wallets                   UserWallet[]
  memberPropertyValues      MemberPropertyValue[]
  spaceNotificationSettings UserSpaceNotificationSettings[]
  userTokenGates            UserTokenGate[]
  unstoppableDomains        UnstoppableDomain[]
  postComments              PostComment[]
  googleAccounts            GoogleAccount[]
  GoogleCredential          GoogleCredential[]
  PageComment               PageComment[]
  verifiedEmails            VerifiedEmail[]
  apiPageKeys               ApiPageKey[]
  spaceActions              UserSpaceAction[]
  proposalBlocks            ProposalBlock[]
  rewardBlocks              RewardBlock[]
  authorNotifications       UserNotificationMetadata[]      @relation("author")
  targetNotifications       UserNotificationMetadata[]      @relation("target")
  ApplicationComment        ApplicationComment[]
}

model VerifiedEmail {
  id        String @id @default(uuid()) @db.Uuid
  email     String @unique
  name      String
  avatarUrl String
  userId    String @db.Uuid
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}

model UserWallet {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address      String        @unique
  userId       String        @db.Uuid
  ensname      String?       @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileItems ProfileItem[]

  @@index([userId])
}

model UserSpaceNotificationSettings {
  userId              String                   @db.Uuid
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId             String                   @db.Uuid
  space               Space                    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  // just keep a list of ids instead of another table, since we dont really care if they exist or not in the db
  forumCategories     String[]
  forumCategoriesMode CategorySubscriptionMode @default(blacklist)

  @@unique([userId, spaceId])
  @@index([userId, spaceId])
}

model UserNotificationState {
  snoozedUntil  DateTime?
  snoozeMessage String?
  userId        String    @unique @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserNotification {
  taskId    String
  createdAt DateTime             @default(now())
  userId    String               @db.Uuid
  type      NotificationType
  channel   NotificationChannel?
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([userId])
}

model UserDetails {
  id          String  @id @db.Uuid
  description String?
  social      Json?
  user        User    @relation(fields: [id], references: [id], onDelete: Cascade)
  timezone    String?
  locale      String?
}

model TelegramUser {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String   @unique @db.Uuid
  telegramId BigInt   @id
  account    Json
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DiscordUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique @db.Uuid
  discordId String   @id
  account   Json
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Poap {
  id            String   @id @default(uuid()) @db.Uuid
  tokenId       String   @unique
  userId        String   @db.Uuid
  walletAddress String
  isHidden      Boolean?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FavoritePage {
  pageId String @db.Uuid
  userId String @db.Uuid
  index  Int    @default(-1)
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
  @@index([userId])
  @@index([pageId])
}

model UserTokenGate {
  id                     String     @id @default(uuid()) @db.Uuid
  spaceId                String     @db.Uuid
  userId                 String     @db.Uuid
  tokenGateConnectedDate DateTime?
  jwt                    String?
  tokenGateId            String?    @db.Uuid
  tokenGate              TokenGate? @relation(fields: [tokenGateId], references: [id], onDelete: SetNull)
  space                  Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedRoles           String[]   @default([])

  @@unique([tokenGateId, userId, spaceId], name: "tokenGateUserSpace")
  @@index([spaceId])
  @@index([userId])
  @@index([tokenGateId])
}

model SpaceRole {
  spaceId         String            @db.Uuid
  userId          String            @db.Uuid
  id              String            @id @default(uuid()) @db.Uuid
  isAdmin         Boolean           @default(false)
  isGuest         Boolean           @default(false)
  createdAt       DateTime          @default(now())
  space           Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceRoleToRole SpaceRoleToRole[]
  tokenGate       TokenGate?        @relation(fields: [tokenGateId], references: [id])
  tokenGateId     String?           @db.Uuid
  joinedViaLink   Boolean?
  onboarded       Boolean           @default(false)

  @@unique([spaceId, userId], name: "spaceUser")
  @@index([spaceId])
  @@index([userId])
}

enum PublicInviteLinkContext {
  proposals
}

model InviteLink {
  id                String                   @id @default(uuid()) @db.Uuid
  code              String                   @unique
  createdAt         DateTime                 @default(now())
  createdBy         String                   @db.Uuid
  spaceId           String                   @db.Uuid
  maxAgeMinutes     Int                      @default(60)
  maxUses           Int                      @default(-1)
  useCount          Int                      @default(0)
  visibleOn         PublicInviteLinkContext?
  author            User                     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  space             Space                    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  inviteLinkToRoles InviteLinkToRole[]

  // One link per public context type for a space
  @@unique([spaceId, visibleOn])
  @@index([createdBy])
  @@index([spaceId])
}

model Bounty {
  createdBy         String               @db.Uuid
  spaceId           String               @db.Uuid
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @default(now())
  dueDate           DateTime?
  rewardAmount      Float?
  rewardToken       String?
  status            BountyStatus         @default(open)
  id                String               @id @default(uuid()) @db.Uuid
  chainId           Int?
  suggestedBy       String?              @db.Uuid
  approveSubmitters Boolean              @default(false)
  submissionsLocked Boolean              @default(false)
  maxSubmissions    Int?                 @default(1)
  author            User                 @relation(fields: [createdBy], references: [id])
  space             Space                @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  applications      Application[]
  permissions       BountyPermission[]
  page              Page?
  customReward      String?
  fields            Json?
  notifications     BountyNotification[]

  @@index([createdBy])
  @@index([spaceId])
}

model BountyPermission {
  id              String                @id @default(uuid()) @db.Uuid
  userId          String?               @db.Uuid
  spaceId         String?               @db.Uuid
  roleId          String?               @db.Uuid
  public          Boolean?
  bountyId        String                @db.Uuid
  permissionLevel BountyPermissionLevel
  operations      BountyOperation[]
  bounty          Bounty                @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  role            Role?                 @relation(fields: [roleId], references: [id], onDelete: Cascade)
  space           Space?                @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user            User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bountyId, permissionLevel], name: "userId_bountyId_permissionLevel")
  @@unique([roleId, bountyId, permissionLevel], name: "roleId_bountyId_permissionLevel")
  @@unique([spaceId, bountyId, permissionLevel], name: "spaceId_bountyId_permissionLevel")
  @@unique([public, bountyId, permissionLevel], name: "public_bountyId_permissionLevel")
  @@index([bountyId])
  @@index([spaceId])
  @@index([roleId])
  @@index([userId])
}

model Application {
  id                 String               @id @default(uuid()) @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  bountyId           String               @db.Uuid
  createdBy          String               @db.Uuid
  walletAddress      String?
  message            String?
  spaceId            String
  status             ApplicationStatus    @default(applied)
  submission         String?
  submissionNodes    String?
  acceptedBy         String?              @db.Uuid
  reviewedBy         String?              @db.Uuid
  bounty             Bounty               @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  applicant          User                 @relation(fields: [createdBy], references: [id])
  transactions       Transaction[]
  ApplicationComment ApplicationComment[]
  notifications      BountyNotification[]

  @@unique([bountyId, createdBy])
  @@index([createdBy])
  @@index([bountyId])
}

model Transaction {
  id            String      @id @default(uuid()) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  transactionId String
  safeTxHash    String?
  chainId       String
  applicationId String      @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model TokenGate {
  id               String            @id @default(uuid()) @db.Uuid
  createdAt        DateTime          @default(now())
  createdBy        String            @db.Uuid
  spaceId          String            @db.Uuid
  conditions       Json
  resourceId       Json
  userRole         String?
  accessTypes      String[]          @default([])
  space            Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  tokenGateToRoles TokenGateToRole[]
  userTokenGates   UserTokenGate[]
  spaceRoles       SpaceRole[]

  @@index([spaceId])
}

model PaymentMethod {
  id                String     @id @default(uuid()) @db.Uuid
  createdAt         DateTime   @default(now())
  createdBy         String     @db.Uuid
  spaceId           String     @db.Uuid
  chainId           Int
  contractAddress   String?
  tokenName         String
  tokenSymbol       String
  tokenDecimals     Int
  tokenLogo         String?
  gnosisSafeAddress String?
  walletType        WalletType @default(metamask)
  space             Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, chainId, contractAddress])
  @@unique([spaceId, chainId, gnosisSafeAddress])
  @@index([spaceId])
}

model UserGnosisSafe {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  chainId   Int
  address   String
  name      String?
  isHidden  Boolean  @default(false)
  threshold Int
  owners    String[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id                          String                       @id @default(uuid()) @db.Uuid
  createdAt                   DateTime                     @default(now())
  createdBy                   String                       @db.Uuid
  externalId                  String?
  name                        String
  spaceId                     String                       @db.Uuid
  source                      RoleSource?
  sourceId                    String?
  space                       Space                        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  bountyPermissions           BountyPermission[]
  permissions                 PagePermission[]
  spacePermissions            SpacePermission[]
  spaceRolesToRole            SpaceRoleToRole[]
  tokenGateToRoles            TokenGateToRole[]
  proposalReviewer            ProposalReviewer[]
  inviteLinkToRoles           InviteLinkToRole[]
  memberPropertyPermissions   MemberPropertyPermission[]
  postCategoryPermissions     PostCategoryPermission[]
  proposalCategoryPermissions ProposalCategoryPermission[]

  @@unique([spaceId, name])
  @@index([spaceId])
}

model TokenGateToRole {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  tokenGateId String    @db.Uuid
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tokenGate   TokenGate @relation(fields: [tokenGateId], references: [id], onDelete: Cascade)

  @@unique([tokenGateId, roleId])
  @@index([tokenGateId])
  @@index([roleId])
}

model InviteLinkToRole {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now())
  inviteLinkId String     @db.Uuid
  roleId       String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  inviteLink   InviteLink @relation(fields: [inviteLinkId], references: [id], onDelete: Cascade)

  @@unique([inviteLinkId, roleId])
  @@index([roleId])
  @@index([inviteLinkId])
}

model SpaceRoleToRole {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  spaceRoleId String    @db.Uuid
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  spaceRole   SpaceRole @relation(fields: [spaceRoleId], references: [id], onDelete: Cascade)

  @@unique([spaceRoleId, roleId])
  @@index([spaceRoleId])
  @@index([roleId])
}

model PagePermission {
  pageId                  String              @db.Uuid
  userId                  String?             @db.Uuid
  id                      String              @id @default(uuid()) @db.Uuid
  permissionLevel         PagePermissionLevel
  permissions             PageOperations[]
  roleId                  String?             @db.Uuid
  spaceId                 String?             @db.Uuid
  inheritedFromPermission String?             @db.Uuid
  public                  Boolean?
  // Specifies if a public page is returned in list operations or is only accessible if you already have the link.
  allowDiscovery          Boolean?            @default(false)
  sourcePermission        PagePermission?     @relation("InheritedPermissions", fields: [inheritedFromPermission], references: [id], onDelete: Cascade)
  page                    Page                @relation(fields: [pageId], references: [id], onDelete: Cascade)
  role                    Role?               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  space                   Space?              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user                    User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  inheritingChildren      PagePermission[]    @relation("InheritedPermissions")

  @@unique([userId, pageId], name: "userId_PageId")
  @@unique([roleId, pageId], name: "roleId_pageId")
  @@unique([spaceId, pageId], name: "spaceId_pageId")
  @@unique([public, pageId], name: "public_pageId")
  @@index([id])
  @@index([inheritedFromPermission])
  @@index([pageId])
  @@index([roleId])
  @@index([userId])
  @@index([spaceId])
}

model SpacePermission {
  id         String           @id @default(uuid()) @db.Uuid
  createdAt  DateTime         @default(now())
  operations SpaceOperation[]
  forSpaceId String           @db.Uuid
  roleId     String?          @db.Uuid
  spaceId    String?          @db.Uuid
  userId     String?          @db.Uuid
  forSpace   Space            @relation("permittedGroups", fields: [forSpaceId], references: [id], onDelete: Cascade)
  role       Role?            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  space      Space?           @relation("spacePermissions", fields: [spaceId], references: [id], onDelete: Cascade)
  user       User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, forSpaceId], name: "userId_forSpaceId")
  @@unique([roleId, forSpaceId], name: "roleId_forSpaceId")
  @@unique([spaceId, forSpaceId], name: "spaceId_forSpaceId")
  @@index([roleId])
  @@index([userId])
  @@index([forSpaceId])
  @@index([spaceId])
}

model Thread {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  pageId    String    @db.Uuid
  context   String
  userId    String    @db.Uuid
  resolved  Boolean
  spaceId   String    @db.Uuid
  updatedAt DateTime?
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]

  @@index([pageId])
  @@index([spaceId])
  @@index([userId])
}

model Comment {
  id                String                 @id @default(uuid()) @db.Uuid
  createdAt         DateTime               @default(now())
  threadId          String                 @db.Uuid
  content           Json?
  userId            String                 @db.Uuid
  pageId            String                 @db.Uuid
  spaceId           String                 @db.Uuid
  updatedAt         DateTime?
  page              Page                   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  space             Space                  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  thread            Thread                 @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user              User                   @relation(fields: [userId], references: [id])
  pageNotifications DocumentNotification[]

  @@index([pageId])
  @@index([spaceId])
  @@index([threadId])
  @@index([userId])
}

enum ProposalEvaluationType {
  vote
  rubric
}

model Proposal {
  id                     String                              @id @default(uuid()) @db.Uuid
  createdBy              String                              @db.Uuid
  spaceId                String                              @db.Uuid
  status                 ProposalStatus
  archived               Boolean?                            @default(false)
  authors                ProposalAuthor[]
  reviewers              ProposalReviewer[]
  space                  Space                               @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  page                   Page?                               @relation("proposal")
  sourcePage             Page?                               @relation("convertedProposal")
  reviewedBy             String?                             @db.Uuid
  reviewer               User?                               @relation(fields: [reviewedBy], references: [id], onDelete: Cascade)
  reviewedAt             DateTime?
  categoryId             String?                             @db.Uuid
  category               ProposalCategory?                   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  snapshotProposalExpiry DateTime?
  publishToLens          Boolean?
  lensPostLink           String?
  Post                   Post[]
  evaluationType         ProposalEvaluationType              @default(vote)
  rubricCriteria         ProposalRubricCriteria[]
  rubricAnswers          ProposalRubricCriteriaAnswer[]
  fields                 Json?
  draftRubricAnswers     DraftProposalRubricCriteriaAnswer[]
  notifications          ProposalNotification[]

  @@index([spaceId])
  @@index([reviewedBy])
  @@index([categoryId])
}

model ProposalBlock {
  id        String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String    @db.Uuid
  updatedAt DateTime  @default(now())
  updatedBy String    @db.Uuid
  spaceId   String    @db.Uuid
  parentId  String
  rootId    String    @db.Uuid
  schema    Int
  type      String    @default("board")
  title     String
  fields    Json
  user      User      @relation(fields: [createdBy], references: [id])
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@id([id, spaceId])
  @@index([rootId])
  @@index([spaceId])
  @@index([createdBy])
}

model RewardBlock {
  id        String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String    @db.Uuid
  updatedAt DateTime  @default(now())
  updatedBy String    @db.Uuid
  spaceId   String    @db.Uuid
  parentId  String
  rootId    String    @db.Uuid
  schema    Int
  type      String    @default("board")
  title     String
  fields    Json
  user      User      @relation(fields: [createdBy], references: [id])
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@id([id, spaceId])
  @@index([rootId])
  @@index([spaceId])
  @@index([createdBy])
}

model ProposalAuthor {
  proposalId String   @db.Uuid
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  author     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId])
  @@index([proposalId])
  @@index([userId])
}

model ProposalReviewer {
  id         String   @id @default(uuid()) @db.Uuid
  proposalId String   @db.Uuid
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  roleId     String?  @db.Uuid
  userId     String?  @db.Uuid
  role       Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  reviewer   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, proposalId], name: "userId_proposalId")
  @@unique([roleId, proposalId], name: "roleId_proposalId")
  @@index([proposalId])
  @@index([roleId])
  @@index([userId])
}

enum ProposalRubricCriteriaType {
  range
}

model ProposalRubricCriteria {
  id           String                              @id @default(uuid()) @db.Uuid
  title        String
  description  String?
  proposalId   String                              @db.Uuid
  proposal     Proposal                            @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  type         ProposalRubricCriteriaType
  parameters   Json
  answers      ProposalRubricCriteriaAnswer[]
  draftAnswers DraftProposalRubricCriteriaAnswer[]

  @@index([proposalId])
}

model ProposalRubricCriteriaAnswer {
  rubricCriteriaId String                 @db.Uuid
  rubricCriteria   ProposalRubricCriteria @relation(fields: [rubricCriteriaId], references: [id], onDelete: Cascade)
  proposalId       String                 @db.Uuid
  proposal         Proposal               @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  userId           String
  response         Json
  comment          String?

  @@unique([userId, rubricCriteriaId])
  @@index([proposalId])
  @@index([rubricCriteriaId])
}

model DraftProposalRubricCriteriaAnswer {
  rubricCriteriaId String                 @db.Uuid
  rubricCriteria   ProposalRubricCriteria @relation(fields: [rubricCriteriaId], references: [id], onDelete: Cascade)
  proposalId       String                 @db.Uuid
  proposal         Proposal               @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  userId           String
  response         Json
  comment          String?

  @@unique([userId, rubricCriteriaId])
  @@index([proposalId])
  @@index([rubricCriteriaId])
}

model ProfileItem {
  id         String          @id
  userId     String          @db.Uuid
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  isHidden   Boolean?
  metadata   Json?
  type       ProfileItemType
  isPinned   Boolean?
  walletId   String?         @db.Uuid
  userWallet UserWallet?     @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([walletId])
}

model WorkspaceEvent {
  id        String             @id @default(uuid()) @db.Uuid
  actorId   String?            @db.Uuid
  actor     User?              @relation(fields: [actorId], references: [id], onDelete: Cascade)
  type      WorkspaceEventType
  meta      Json?
  spaceId   String             @db.Uuid
  space     Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  pageId    String             @db.Uuid
  page      Page               @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())

  @@index([actorId])
  @@index([spaceId])
  @@index([pageId])
  @@index([createdAt])
}

enum ProposalCategoryOperation {
  manage_permissions
  create_proposal
  edit
  delete
  view_category
  comment_proposals
  vote_proposals
}

enum ProposalOperation {
  edit
  view
  delete
  create_vote
  vote
  comment
  review
  evaluate
  make_public
  archive
  unarchive
}

enum ProposalCategoryPermissionLevel {
  view
  view_comment
  view_comment_vote
  create_comment
  full_access
}

model ProposalCategoryPermission {
  id                 String                          @id @default(uuid()) @db.Uuid
  permissionLevel    ProposalCategoryPermissionLevel
  proposalCategoryId String                          @db.Uuid
  proposalCategory   ProposalCategory                @relation(fields: [proposalCategoryId], references: [id], onDelete: Cascade)
  // These fields will only be used when the custom permission level is used
  // For now adding these to the schema so that Prisma Client doesn't drop the enums at generator stage
  categoryOperations ProposalCategoryOperation[]
  proposalOperations ProposalOperation[]

  // Permission assignees
  roleId  String?  @db.Uuid
  role    Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  spaceId String?  @db.Uuid
  space   Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  public  Boolean?

  @@unique([roleId, proposalCategoryId])
  @@unique([spaceId, proposalCategoryId])
  @@unique([public, proposalCategoryId])
  @@index([proposalCategoryId])
  @@index([proposalCategoryId, roleId])
  @@index([proposalCategoryId, spaceId])
  @@index([proposalCategoryId, public])
}

model ProposalCategory {
  id                          String                       @id @default(uuid()) @db.Uuid
  spaceId                     String                       @db.Uuid
  space                       Space                        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  title                       String
  color                       String
  proposal                    Proposal[]
  proposalCategoryPermissions ProposalCategoryPermission[]

  @@unique([spaceId, title])
  @@index([spaceId])
}

model MemberProperty {
  id                   String                     @id @default(uuid()) @db.Uuid
  createdAt            DateTime                   @default(now())
  createdBy            String                     @db.Uuid
  updatedAt            DateTime                   @updatedAt
  updatedBy            String                     @db.Uuid
  spaceId              String                     @db.Uuid
  space                Space                      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  name                 String
  type                 MemberPropertyType
  options              Json?
  index                Int                        @default(-1)
  memberPropertyValues MemberPropertyValue[]
  permissions          MemberPropertyPermission[]
  enabledViews         VisibilityView[]           @default([gallery, table, profile])

  @@index([spaceId])
}

model MemberPropertyValue {
  id               String         @id @default(uuid()) @db.Uuid
  updatedAt        DateTime       @updatedAt
  updatedBy        String         @db.Uuid
  memberPropertyId String         @db.Uuid
  memberProperty   MemberProperty @relation(fields: [memberPropertyId], references: [id], onDelete: Cascade)
  spaceId          String         @db.Uuid
  space            Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId           String         @db.Uuid
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  value            Json?

  @@unique([memberPropertyId, spaceId, userId])
  @@index([memberPropertyId])
  @@index([spaceId])
  @@index([userId])
}

model MemberPropertyPermission {
  id                            String                        @id @default(uuid()) @db.Uuid
  roleId                        String?                       @db.Uuid
  memberPropertyPermissionLevel MemberPropertyPermissionLevel
  memberPropertyId              String                        @db.Uuid
  memberProperty                MemberProperty                @relation(fields: [memberPropertyId], references: [id], onDelete: Cascade)
  role                          Role?                         @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, memberPropertyId])
  @@index([memberPropertyId])
  @@index([roleId])
}

// Begin Forum models
model PostCategory {
  id                      String                   @id @default(uuid()) @db.Uuid
  name                    String
  description             String?
  path                    String?
  defaultForSpace         Space?                   @relation(name: "defaultPostCategory")
  spaceId                 String                   @db.Uuid
  space                   Space                    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Post                    Post[]
  postCategoryPermissions PostCategoryPermission[]

  @@unique([spaceId, name])
  @@unique([spaceId, path])
}

model Post {
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  deletedAt            DateTime?
  id                   String                  @id @default(uuid()) @db.Uuid
  title                String
  content              Json
  contentText          String
  path                 String                  @unique
  categoryId           String                  @db.Uuid
  createdBy            String                  @db.Uuid
  author               User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  spaceId              String                  @db.Uuid
  space                Space                   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  pinned               Boolean?                @default(false)
  locked               Boolean?                @default(false)
  category             PostCategory            @relation(fields: [categoryId], references: [id])
  comments             PostComment[]
  upDownVotes          PostUpDownVote[]
  commentUpDownVotes   PostCommentUpDownVote[]
  proposalId           String?                 @db.Uuid
  proposal             Proposal?               @relation(fields: [proposalId], references: [id], onDelete: SetNull)
  votes                Vote[]
  isDraft              Boolean?                @default(false)
  userSpaceActions     UserSpaceAction[]
  postToPostTags       PostToPostTag[]
  notifications        PostNotification[]
  DocumentNotification DocumentNotification[]

  @@index([categoryId])
  @@index([path])
  @@index([spaceId, deletedAt]) // space feed
  @@index([spaceId, deletedAt, categoryId]) // category feed
}

model PostToPostTag {
  postId    String  @db.Uuid
  postTagId String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postTag   PostTag @relation(fields: [postTagId], references: [id], onDelete: Cascade)

  @@unique([postId, postTagId])
  @@index([postId])
  @@index([postTagId])
}

model PostUpDownVote {
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  upvoted   Boolean
  postId    String   @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([createdBy, postId])
  @@index([postId])
}

model PostComment {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  createdBy   String    @db.Uuid
  content     Json
  contentText String
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   String?
  parentId    String?

  postId               String                  @db.Uuid
  post                 Post                    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                 User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  votes                PostCommentUpDownVote[]
  DocumentNotification DocumentNotification[]

  @@index([postId])
}

model ApplicationComment {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  createdBy   String    @db.Uuid
  content     Json
  contentText String
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   String?
  parentId    String?   @db.Uuid

  applicationId String      @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model PostCommentUpDownVote {
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  upvoted   Boolean

  commentId String      @db.Uuid
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String      @db.Uuid
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([createdBy, commentId])
  @@index([commentId])
  @@index([postId])
}

model PostTag {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  spaceId        String          @db.Uuid
  space          Space           @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  postToPostTags PostToPostTag[]

  @@unique([spaceId, name])
  @@index([spaceId])
}

model UnstoppableDomain {
  id     String @id @default(uuid()) @db.Uuid
  domain String @unique
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([domain])
  @@index([userId])
}

model WebhookSubscription {
  id        String    @id @default(uuid()) @db.Uuid
  createdBy String    @db.Uuid
  scope     String
  spaceId   String    @db.Uuid
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([scope, spaceId])
}

model GoogleAccount {
  id        String @id @default(uuid()) @db.Uuid
  email     String @unique
  name      String
  avatarUrl String
  userId    String @db.Uuid
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}

model GoogleCredential {
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  id           String    @id @default(uuid()) @db.Uuid
  expiredAt    DateTime?
  error        Json?
  name         String
  refreshToken String
  scope        String
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

enum PostCategoryOperation {
  manage_permissions
  delete_category
  edit_category
  create_post
  view_posts
  comment_posts
}

enum PostOperation {
  view_post
  edit_post
  delete_post
  pin_post
  lock_post
  add_comment
  delete_comments
  upvote
  downvote
}

enum PostCategoryPermissionLevel {
  category_admin
  moderator
  full_access
  comment_vote
  view
  custom
}

model PostCategoryPermission {
  id                 String                      @id @default(uuid()) @db.Uuid
  permissionLevel    PostCategoryPermissionLevel
  postCategoryId     String                      @db.Uuid
  postCategory       PostCategory                @relation(fields: [postCategoryId], references: [id], onDelete: Cascade)
  // These fields will only be used when the custom permission level is used
  categoryOperations PostCategoryOperation[]
  postOperations     PostOperation[]

  // Permission assignees
  roleId  String?  @db.Uuid
  role    Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  spaceId String?  @db.Uuid
  space   Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  public  Boolean?

  @@unique([roleId, postCategoryId])
  @@unique([spaceId, postCategoryId])
  @@unique([public, postCategoryId])
  @@index([postCategoryId])
  @@index([postCategoryId, roleId])
  @@index([postCategoryId, spaceId])
  @@index([postCategoryId, public])
}

model ApiPageKey {
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  createdBy String         @db.Uuid
  pageId    String         @db.Uuid
  apiKey    String
  type      ApiPageKeyType
  page      Page           @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([pageId, type])
  @@unique([apiKey])
  @@index([pageId])
  @@index([apiKey])
}

model BlockCount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  count     Int
  spaceId   String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  details   Json

  @@index([spaceId])
}

model UserNotificationMetadata {
  id                    String                 @id @default(uuid()) @db.Uuid
  createdAt             DateTime               @default(now())
  createdBy             String                 @db.Uuid
  author                User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade, name: "author")
  deletedAt             DateTime?
  seenAt                DateTime?
  archivedAt            DateTime?
  channel               NotificationChannel?
  spaceId               String                 @db.Uuid
  space                 Space                  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId                String                 @db.Uuid
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "target")
  bountyNotifications   BountyNotification[]
  documentNotifications DocumentNotification[]
  cardNotifications     CardNotification[]
  postNotifications     PostNotification[]
  proposalNotifications ProposalNotification[]
  voteNotifications     VoteNotification[]
}

model BountyNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // bounty task columns
  bountyId               String                   @db.Uuid
  bounty                 Bounty                   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  applicationId          String?                  @db.Uuid
  application            Application?             @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  type                   String
}

model DocumentNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // page task columns
  pageId                 String?                  @db.Uuid
  page                   Page?                    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  mentionId              String?
  inlineComment          Comment?                 @relation(fields: [inlineCommentId], references: [id], onDelete: Cascade)
  inlineCommentId        String?                  @db.Uuid
  type                   String
  postCommentId          String?                  @db.Uuid
  postComment            PostComment?             @relation(fields: [postCommentId], references: [id], onDelete: Cascade)
  pageCommentId          String?                  @db.Uuid
  pageComment            PageComment?             @relation(fields: [pageCommentId], references: [id], onDelete: Cascade)
  postId                 String?                  @db.Uuid
  post                   Post?                    @relation(fields: [postId], references: [id], onDelete: Cascade)
  content                Json?
}

model CardNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // card task columns
  cardId                 String                   @db.Uuid
  card                   Block                    @relation(fields: [cardId], references: [id], onDelete: Cascade, name: "card")
  personPropertyId       String?
  type                   String
}

model PostNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // forum task column
  postId                 String                   @db.Uuid
  post                   Post                     @relation(fields: [postId], references: [id], onDelete: Cascade)
  type                   String
}

model ProposalNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // proposal task columns
  proposalId             String                   @db.Uuid
  proposal               Proposal                 @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  type                   String
}

model VoteNotification {
  id                     String                   @id @default(uuid()) @db.Uuid
  notificationMetadataId String                   @db.Uuid
  notificationMetadata   UserNotificationMetadata @relation(fields: [notificationMetadataId], references: [id], onDelete: Cascade)
  // vote task columns
  voteId                 String                   @db.Uuid
  vote                   Vote                     @relation(fields: [voteId], references: [id], onDelete: Cascade)
  type                   String
}

model SQSMessage {
  id        String   @id
  createdAt DateTime @default(now())
  payload   Json?
}
