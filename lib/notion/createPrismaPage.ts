import type { Prisma, Page } from '@charmverse/core/prisma';

import { getPagePath } from 'lib/pages';
import { createPage } from 'lib/pages/server/createPage';
import { permissionsApiClient } from 'lib/permissions/api/client';

export type CreatePageInput = {
  id: string;
  headerImage?: string | null;
  icon?: string | null;
  spaceId: string;
  title: string;
  type?: Page['type'];
  createdBy: string;
  boardId?: string;
  parentId?: string | null;
  cardId?: string;
};

export async function createPrismaPage({
  id,
  headerImage = null,
  icon,
  spaceId,
  title,
  type = 'page',
  createdBy,
  boardId,
  parentId,
  cardId
}: CreatePageInput) {
  const pageCreateInput: Prisma.PageCreateInput = {
    id,
    // TODO: Generate content text
    contentText: '',
    createdAt: new Date(),
    author: {
      connect: {
        id: createdBy
      }
    },
    updatedAt: new Date(),
    updatedBy: createdBy,
    path: getPagePath(),
    space: {
      connect: {
        id: spaceId || undefined
      }
    },
    autoGenerated: true,
    headerImage,
    icon,
    title: title || '',
    type,
    boardId,
    parent: parentId
      ? {
          connect: {
            id: parentId
          }
        }
      : undefined
  };

  if (type === 'card' && cardId) {
    pageCreateInput.card = {
      connect: {
        id: cardId
      }
    };
  }

  const page = await createPage({ data: pageCreateInput });

  await permissionsApiClient.pages.setupPagePermissionsAfterEvent({
    event: 'created',
    pageId: page.id
  });

  return page;
}
