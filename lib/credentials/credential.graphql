# GraphQL Type Definitions

# Enum for CredentialType
enum CredentialType {
  proposal
}

# Concrete CredentialData type for 'proposal' CredentialType
# Schema on Optimism: https://optimism.easscan.org/schema/view/0x20770d8c0a19668aa843240ddf6d57025334b346171c28dfed1a7ddb16928b89
type ProposalCredential {
  name: String!
  description: String!
  organization: String
  url: String
  status: String
}

# This type comes from the @eas/sdk npm lib and is a raw signature that can be independently decoded and verified
scalar SignedOffchainAttestation

type CredentialWallet {
  address: String!
  ensname: String
}

# For now, we only support proposal credentials
union CredentialContent = ProposalCredential

type SignedCredential
  @createModel(accountRelation: LIST, description: "A verifiable credential of type EIP712")
  @createIndex(fields: [{ path: "timestamp" }])
  @createIndex(fields: [{ path: "issuer.wallet" }])
  @createIndex(fields: [{ path: "issuer.ensname" }])
  @createIndex(fields: [{ path: "recipient.wallet" }])
  @createIndex(fields: [{ path: "recipient.ensname" }])
  @createIndex(fields: [{ path: "schemaId" }])
  @createIndex(fields: [{ path: "type" }]) {
  issuer: CredentialWallet!
  recipient: CredentialWallet!
  content: CredentialContent!
  sig: SignedOffchainAttestation!
  type: CredentialType!
  verificationUrl: String!
  chainId: Int!
  schemaId: String!
  timestamp: Int!
}

# Queries

type Query {
  # Query to get credentials by issuer
  credentialsByIssuer(wallet: String!): [SignedCredential]

  # Query to get credentials by recipient
  credentialsByRecipient(recipient: String!): [SignedCredential]

  # Query to get credentials by schemaId
  credentialsBySchemaId(schemaId: String!): [SignedCredential]

  # Query to get credentials by type
  credentialsBySchemaId(type: CredentialType!): [SignedCredential]
}
