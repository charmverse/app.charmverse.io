import type { PageMeta } from '@charmverse/core/pages';
import type { Prisma } from '@charmverse/core/prisma';
import type { PrismaTransactionClient } from '@charmverse/core/prisma-client';
import { prisma } from '@charmverse/core/prisma-client';
import { validate } from 'uuid';

import { generatePageQuery } from './generatePageQuery';

export function pageMetaSelect(): Required<Pick<Prisma.PageSelect, keyof PageMeta>> & {
  autoGenerated: true;
  convertedProposalId: true;
} {
  return {
    id: true,
    autoGenerated: true,
    boardId: true,
    bountyId: true,
    cardId: true,
    createdAt: true,
    createdBy: true,
    deletedAt: true,
    deletedBy: true,
    galleryImage: true,
    hasContent: true,
    headerImage: true,
    icon: true,
    index: true,
    parentId: true,
    path: true,
    additionalPaths: true,
    proposalId: true,
    title: true,
    spaceId: true,
    updatedAt: true,
    updatedBy: true,
    type: true,
    syncWithPageId: true,
    convertedProposalId: true
  };
}

export async function getPageMeta(
  pageIdOrPath: string,
  spaceId?: string,
  tx: PrismaTransactionClient = prisma
): Promise<PageMeta | null> {
  const isValidUUid = validate(pageIdOrPath);

  // We need a spaceId if looking up by path
  if (!isValidUUid && !spaceId) {
    return null;
  }

  const searchQuery: Prisma.PageWhereInput = generatePageQuery({
    pageIdOrPath,
    spaceIdOrDomain: spaceId
  });

  return tx.page.findFirst({
    where: searchQuery,
    select: pageMetaSelect()
  }) as Promise<PageMeta | null>;
}
