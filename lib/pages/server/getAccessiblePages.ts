import type { Page, Prisma, SpaceRole, SpaceRoleToRole } from '@prisma/client';

import { prisma } from 'db';
import type { PagePermissionMeta } from 'lib/permissions/interfaces';

import type { IPageWithPermissions } from '../interfaces';

type PermissionsSelect = Record<keyof PagePermissionMeta, true>;
type PageFieldsWithoutContent = Record<keyof Omit<Page, 'content' | 'contentText' | 'version'>, true>;

type PagesRequest = {
  spaceId: string;
  userId?: string;
  archived?: boolean;
  pageIds?: string[];
  search?: string;
};

/**
 * Utility for getting permissions of a page
 * @returns
 */
export function includePagePermissions(): Prisma.PageInclude & {
  permissions: {
    include: {
      sourcePermission: true;
    };
  };
} {
  return {
    permissions: {
      include: {
        sourcePermission: true
      }
    }
  };
}

export function includePagePermissionsMeta(): { permissions: { select: PermissionsSelect } } {
  return {
    permissions: {
      select: {
        pageId: true,
        userId: true,
        id: true,
        permissionLevel: true,
        permissions: true,
        roleId: true,
        spaceId: true,
        public: true
      }
    }
  };
}

function selectPageFields() {
  const select: { select: PageFieldsWithoutContent } = {
    select: {
      id: true,
      deletedAt: true,
      createdAt: true,
      createdBy: true,
      updatedAt: true,
      updatedBy: true,
      title: true,
      headerImage: true,
      icon: true,
      path: true,
      isTemplate: true,
      parentId: true,
      spaceId: true,
      type: true,
      boardId: true,
      autoGenerated: true,
      index: true,
      cardId: true,
      proposalId: true,
      snapshotProposalId: true,
      fullWidth: true,
      bountyId: true,
      hasContent: true,
      galleryImage: true,
      convertedProposalId: true,
      deletedBy: true,
      ...includePagePermissionsMeta()
    }
  };

  return select;
}

export function accessiblePagesByPermissionsQuery({
  spaceId,
  userId
}: {
  spaceId: string;
  userId: string;
}): Prisma.PagePermissionListRelationFilter {
  return {
    some: {
      OR: [
        {
          role: {
            spaceRolesToRole: {
              some: {
                spaceRole: {
                  userId,
                  spaceId
                }
              }
            }
          }
        },
        {
          userId
        },
        {
          space: {
            spaceRoles: {
              some: {
                userId,
                spaceId
              }
            }
          }
        },
        {
          public: true
        }
      ]
    }
  };
}

export async function getAccessiblePages(input: PagesRequest): Promise<IPageWithPermissions[]> {
  let spaceRole: SpaceRole | null = null;

  if (input.userId) {
    spaceRole = await prisma.spaceRole.findFirst({
      where: {
        userId: input.userId,
        spaceId: input.spaceId
      }
    });

    // Not a space member, make userId undefined
    if (!spaceRole) {
      input.userId = undefined;
    }
  }

  const availableRoles: { id: string; spaceRolesToRole: SpaceRoleToRole[] }[] =
    input.userId && spaceRole && !spaceRole.isGuest
      ? await prisma.role.findMany({
          where: {
            spaceId: input.spaceId,
            spaceRolesToRole: {
              some: {
                spaceRole: {
                  userId: input.userId
                }
              }
            }
          },
          select: {
            id: true,
            spaceRolesToRole: true
          }
        })
      : [];

  // ref: https://www.postgresql.org/docs/12/functions-textsearch.html
  // ref: https://www.postgresql.org/docs/10/textsearch-controls.html
  // prisma refs: https://github.com/prisma/prisma/issues/8950
  const formattedSearch = input.search
    ? `${input.search
        .split(/\s/)
        .filter((s) => s)
        .join(' <-> ')}:*`
    : undefined;

  let pages: IPageWithPermissions[];

  if (input.search) {
    // Search by title and content, prioritize matches by title - TODO: use raw queries to improve performance
    const [pagesByTitle, pagesByContent] = await Promise.all([
      prisma.page.findMany({
        where: {
          title: { search: formattedSearch },
          spaceId: input.spaceId,
          deletedAt: input.archived ? { not: null } : null
        },
        ...selectPageFields()
      }),
      prisma.page.findMany({
        where: {
          contentText: { search: formattedSearch },
          spaceId: input.spaceId,
          deletedAt: input.archived ? { not: null } : null
        },
        ...selectPageFields()
      })
    ]);
    pages = [
      ...pagesByTitle,
      ...pagesByContent.filter((page) => !pagesByTitle.some((p) => p.id === page.id))
    ] as IPageWithPermissions[];
  } else {
    pages = (await prisma.page.findMany({
      where: {
        spaceId: input.spaceId,
        deletedAt: input.archived ? { not: null } : null
      },
      ...selectPageFields()
    })) as IPageWithPermissions[];
  }

  if (spaceRole?.isAdmin) {
    return pages as IPageWithPermissions[];
  }

  const filteredPages = pages.filter((page) => {
    if (spaceRole && (page.type === 'proposal_template' || page.type === 'proposal')) {
      return true;
    }

    // Guest users
    if (spaceRole?.isGuest) {
      return page.permissions.some((permission) => permission.public === true || permission.userId === input.userId);
    }

    // Normal member users
    return page.permissions.some((permission) => {
      if (permission.public) {
        return true;
      } else if (input.userId && spaceRole) {
        return (
          permission.userId === input.userId ||
          (permission.roleId &&
            availableRoles.some((r) =>
              r.spaceRolesToRole.some((s) => s.spaceRoleId === spaceRole?.id && r.id === permission.roleId)
            )) ||
          permission.spaceId === input.spaceId
        );
      } else {
        return false;
      }
    });
  });

  return filteredPages as IPageWithPermissions[];
}
