diff --git a/node_modules/@skiff-org/prosemirror-tables/dist/index.es.js b/node_modules/@skiff-org/prosemirror-tables/dist/index.es.js
index fb1644e..b60a4b1 100644
--- a/node_modules/@skiff-org/prosemirror-tables/dist/index.es.js
+++ b/node_modules/@skiff-org/prosemirror-tables/dist/index.es.js
@@ -8,9 +8,11 @@ import { Transform } from 'prosemirror-transform';
 import { splitBlockKeepMarks } from 'prosemirror-commands';
 import { MenuItem as MenuItem$1, Dropdown, renderGrouped } from 'prosemirror-menu';
 import React, { useRef, useCallback, useEffect, useState, useMemo } from 'react';
-import { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';
-import { createGenerateClassName, StylesProvider, ThemeProvider } from '@material-ui/core/styles';
-import { createTheme } from '@material-ui/core';
+import { DatePicker } from '@mui/x-date-pickers';
+import LocalizationProvider from '@mui/lab/LocalizationProvider';
+import AdapterDayjs from '@mui/lab/AdapterDayjs';
+import { StylesProvider, ThemeProvider } from '@mui/material/styles';
+import { createTheme } from '@mui/material/styles';
 import ReactDOM from 'react-dom';
 
 function ownKeys(object, enumerableOnly) {
@@ -4851,7 +4853,7 @@ var deleteMenuItem = function deleteMenuItem() {
   });
 };
 
-var colors = ['rgb(255, 191, 181)', 'rgb(247, 204, 98)', 'rgb(181, 220, 175)', 'rgb(214, 232, 250)', 'rgb(216, 195, 255)', 'transparent'];
+var colors = ['var(--bg-gray)', 'var(--bg-brown)', 'var(--bg-orange)', 'var(--bg-yellow)', 'var(--bg-green)', 'var(--bg-blue)', 'var(--bg-purple)', 'var(--bg-pink)', 'var(--bg-red)', 'transparent'];
 
 var cellBackgroundColorItem = function cellBackgroundColorItem(color) {
   return new MenuItem$1({
@@ -4923,7 +4925,9 @@ var TablePopUpMenuView = /*#__PURE__*/function () {
     } // append popup to dom
 
 
-    this.popUpRelativeContainer.appendChild(this.popUpDOM); // add event listeners to color in red before deleting rows/cols
+    if (this.popUpRelativeContainer) {
+      this.popUpRelativeContainer.appendChild(this.popUpDOM); // add event listeners to color in red before deleting rows/cols
+    }
 
     this.popUpDOM.addEventListener('mouseover', addDeleteHoverClass);
     this.popUpDOM.addEventListener('mouseout', removeDeleteHoverClass); // render prosemirror menu to popUpDom
@@ -5824,9 +5828,6 @@ var DateEventEmitter = function DateEventEmitter() {};
 
 ee(DateEventEmitter.prototype);
 var datePopupEmitter = new DateEventEmitter();
-var generateClassName$1 = createGenerateClassName({
-  seed: 'sgo-tables-plugin-'
-});
 
 var DateComponent = function DateComponent(_ref) {
   var view = _ref.view,
@@ -5906,22 +5907,23 @@ var DatePickerComponent = function DatePickerComponent(_ref2) {
       view.dispatch(tr);
     }
   }, [view, pos]);
+
   return /*#__PURE__*/React.createElement("div", {
     className: "date-picker",
     ref: ref
-  }, /*#__PURE__*/React.createElement(StylesProvider, {
-    generateClassName: generateClassName$1
   }, /*#__PURE__*/React.createElement(ThemeProvider, {
     theme: DatePickerTheme
-  }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {
-    utils: DayjsUtils
+  }, /*#__PURE__*/React.createElement(LocalizationProvider, {
+    dateAdapter: AdapterDayjs
   }, /*#__PURE__*/React.createElement(DatePicker, {
     autoOk: true,
+    inputFormat: DATE_FORMAT,
     onChange: handleChange,
-    openTo: "date",
+    openTo: "day",
+    renderInput: (params) =>  new TextField(params),
     value: date,
     variant: "static"
-  })))));
+  }))));
 };
 
 var ReactNodeView = /*#__PURE__*/function () {
@@ -6476,7 +6478,6 @@ var generateMenuPopup$1 = function generateMenuPopup() {
 };
 var displayPopup$1 = function displayPopup(view, popupDOM) {
   var menuData = tableHeadersMenuKey.getState(view.state);
-
   if (menuData) {
     popupDOM.style.display = 'flex';
     return menuData;
@@ -7093,7 +7094,7 @@ var deleteItem = function deleteItem() {
   });
 };
 
-var menuItems = [[columnTypeDropdown()], [filterItem(), sortItem(1), sortItem(-1), insertColumnItem(1), insertColumnItem(-1), deleteItem()]];
+var menuItems = [/*[columnTypeDropdown()]*/ [/*filterItem(),*/ sortItem(1), sortItem(-1), insertColumnItem(1), insertColumnItem(-1), deleteItem()]];
 
 // ::- The type of field that `FieldPrompt` expects to be passed to it.
 var Field = /*#__PURE__*/function () {
@@ -7207,7 +7208,9 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
       }
     }); // append popup to dom
 
-    this.popUpRelativeContainer.appendChild(this.popUpDOM); // render prosemirror menu to popUpDom
+    if (this.popUpRelativeContainer) {
+      this.popUpRelativeContainer.appendChild(this.popUpDOM); // render prosemirror menu to popUpDom
+    }
 
     var _renderGrouped = renderGrouped(this.view, items),
         itemsDOM = _renderGrouped.dom,
@@ -7260,7 +7263,6 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
     value: function updateMenu(view) {
       // determine whether to display or hide popup - and change style accordingly
       var headerData = displayPopup$1(view, this.popUpDOM); // different header selected
-
       if (headerData && this.headerData && headerData.pos !== this.headerData.pos) {
         this.onClose();
       } // no header selected
@@ -7286,7 +7288,6 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
         this.setTypesDropdownContent();
       } // Update the menu items state before calculating the position
 
-
       this.updateMenuItems(view); // // calculate popup position
 
       calculateMenuPosition$1(this.popUpDOM, headerData);
@@ -7309,6 +7310,7 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
   }, {
     key: "setTypesDropdownContent",
     value: function setTypesDropdownContent() {
+      return; // disabled type dropdown
       var _this$popUpDOM$getEle = this.popUpDOM.getElementsByClassName(dropdownClassName),
           _this$popUpDOM$getEle2 = _slicedToArray(_this$popUpDOM$getEle, 1),
           dropDown = _this$popUpDOM$getEle2[0];
@@ -7371,7 +7373,6 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
 
       if (resolvedCell.type.name !== 'table_cell' || resolvedCell.attrs.id !== this.headerData.node.attrs.id) return;
       var tr = this.view.state.tr;
-
       if (inputFieldValue !== '') {
         if (headerContent === '') {
           tr.insertText(inputFieldValue, pos + 2);
@@ -7382,6 +7383,9 @@ var TableHeadersMenuView = /*#__PURE__*/function () {
         tr.deleteRange(pos + 2, pos + node.nodeSize - 2);
       }
 
+      // prevent infinite recursion
+      this.headerData = null;
+
       this.view.dispatch(tr);
     }
   }, {
@@ -8745,7 +8749,9 @@ var TableDateMenuView = /*#__PURE__*/function () {
     this.view = view;
     this.buildMenuDOM(); // append popup to dom
 
-    this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    if (this.popUpRelativeContainer) {
+      this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    }
   }
 
   _createClass(TableDateMenuView, [{
@@ -8928,7 +8934,9 @@ var TableLabelsMenu = /*#__PURE__*/function () {
     this.view = view;
     this.buildMenuDOM(); // append popup to dom
 
-    this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    if (this.popUpRelativeContainer) {
+      this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    }
   }
 
   _createClass(TableLabelsMenu, [{
@@ -9319,10 +9327,6 @@ var SelectDropdown = function SelectDropdown(_ref3) {
   })));
 };
 
-var generateClassName = createGenerateClassName({
-  seed: 'sgo-tables-plugin-'
-});
-
 var FiltersDatePicker = function FiltersDatePicker(_ref) {
   var onFilterChange = _ref.onFilterChange,
       filterHandler = _ref.filterHandler;
@@ -9332,28 +9336,27 @@ var FiltersDatePicker = function FiltersDatePicker(_ref) {
       date = _useState2[0],
       setDate = _useState2[1];
 
-  return /*#__PURE__*/React.createElement(StylesProvider, {
-    generateClassName: generateClassName
-  }, /*#__PURE__*/React.createElement(ThemeProvider, {
+  return React.createElement(ThemeProvider, {
     theme: DatePickerTheme
-  }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {
-    utils: DayjsUtils
+  }, /*#__PURE__*/React.createElement(LocalizationProvider, {
+    dateAdapter: AdapterDayjs
   }, /*#__PURE__*/React.createElement(DatePicker, {
-    format: DATE_FORMAT,
+    inputFormat: DATE_FORMAT,
     onChange: function onChange(newValue) {
       setDate(newValue.toDate().getTime());
       onFilterChange(_objectSpread2(_objectSpread2({}, filterHandler.toAttrsValue()), {}, {
         filterValue: newValue.toDate().getTime()
       }));
     },
-    openTo: "date",
+    openTo: "day",
+    renderInput: (params) =>  new TextField(params),
     style: {
       width: '100px',
       cursor: 'pointer'
     },
     value: date,
     variant: "inline"
-  }))));
+  })));
 };
 
 var FiltersInputDropdown = function FiltersInputDropdown(_ref2) {
@@ -9687,7 +9690,9 @@ var TableFiltersMenuView = /*#__PURE__*/function () {
     this.view = view;
     this.buildMenuDOM(); // append popup to dom
 
-    this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    if (this.popUpRelativeContainer) {
+      this.popUpRelativeContainer.appendChild(this.popUpDOM);
+    }
   }
 
   _createClass(TableFiltersMenuView, [{
diff --git a/node_modules/@skiff-org/prosemirror-tables/dist/index.js b/node_modules/@skiff-org/prosemirror-tables/dist/index.js
index fb57edd..78d0b30 100644
--- a/node_modules/@skiff-org/prosemirror-tables/dist/index.js
+++ b/node_modules/@skiff-org/prosemirror-tables/dist/index.js
@@ -12,7 +12,7 @@ var prosemirrorTransform = require('prosemirror-transform');
 var prosemirrorCommands = require('prosemirror-commands');
 var prosemirrorMenu = require('prosemirror-menu');
 var React = require('react');
-var pickers = require('@material-ui/pickers');
+var pickers = require('@mui/x-date-pickers');
 var styles = require('@material-ui/core/styles');
 var core = require('@material-ui/core');
 var ReactDOM = require('react-dom');
@@ -3667,6 +3667,7 @@ var getColIndexFromSelectedRect = function getColIndexFromSelectedRect(state, po
   return cellIndex % tableRect.map.width;
 };
 var createElementWithClass = function createElementWithClass(type, className, datatest) {
+  if (typeof document === 'undefined') return;
   var el = document.createElement(type);
   el.className = className;
 
@@ -4618,6 +4619,7 @@ var generateMenuPopup$2 = function generateMenuPopup() {
   return menuElement;
 };
 var generateColorItemDOM = function generateColorItemDOM(color) {
+  if (typeof document === 'undefined') return;
   var container = createElementWithClass('div', 'colorItemContainer');
   var button = createElementWithClass(color === 'transparent' ? 'span' : 'button', 'colorItemButton');
   var indicator = createElementWithClass('div', 'colorItemIndicator');
@@ -6801,6 +6803,9 @@ var HoverDropdown = /*#__PURE__*/function () {
 }();
 
 var getTypesItems = function getTypesItems() {
+
+  if (typeof document === 'undefined') return [];
+
   return types.map(function (type) {
     var dom = document.createElement('div');
     dom.dataset.test = "".concat(type.id, "-type-item");
@@ -7430,8 +7435,9 @@ var typeInheritance = function typeInheritance(view, node, pos) {
 
   if (tr.steps.length) view.dispatch(tr);
 };
-
-window.id = "user_".concat(new Date().getTime());
+if (typeof window !== 'undefined') {
+  window.id = "user_".concat(new Date().getTime());
+}
 var tableHeadersMenu = function tableHeadersMenu() {
   return new prosemirrorState.Plugin({
     key: tableHeadersMenuKey,
@@ -7995,6 +8001,7 @@ var ColDragHandler = /*#__PURE__*/function () {
 var key$1 = new prosemirrorState.PluginKey('tableColumnHandles');
 var CellView = /*#__PURE__*/function () {
   function CellView(node, view, getPos) {
+
     _classCallCheck(this, CellView);
 
     this.getPos = getPos;
diff --git a/node_modules/@skiff-org/prosemirror-tables/style/table-filters.css b/node_modules/@skiff-org/prosemirror-tables/style/table-filters.css
index 006716e..66ffcce 100644
--- a/node_modules/@skiff-org/prosemirror-tables/style/table-filters.css
+++ b/node_modules/@skiff-org/prosemirror-tables/style/table-filters.css
@@ -149,22 +149,27 @@
 .column-chooser .selected-icon.textType {
   content: url(./svgs/types/text_type.svg);
 }
+
 .colItem.numberType .select-dropdown-item-icon,
 .column-chooser .selected-icon.numberType {
   content: url(./svgs/types/number_type.svg);
 }
+
 .colItem.dateType .select-dropdown-item-icon,
 .column-chooser .selected-icon.dateType {
   content: url(./svgs/types/date.svg);
 }
+
 .colItem.labelsType .select-dropdown-item-icon,
 .column-chooser .selected-icon.labelsType {
   content: url(./svgs/types/label.svg);
 }
+
 .colItem.checkboxType .select-dropdown-item-icon,
 .column-chooser .selected-icon.checkboxType {
   content: url(./svgs/types/checkbox_type.svg);
 }
+
 .colItem.currencyType .select-dropdown-item-icon,
 .column-chooser .selected-icon.currencyType {
   content: url(./svgs/types/currency.svg);
