diff --git a/node_modules/@bangle.dev/pm/dist/index.cjs b/node_modules/@bangle.dev/pm/dist/index.cjs
index 63dfa48..416379e 100644
--- a/node_modules/@bangle.dev/pm/dist/index.cjs
+++ b/node_modules/@bangle.dev/pm/dist/index.cjs
@@ -11,7 +11,6 @@ var prosemirrorKeymap = require('prosemirror-keymap');
 var prosemirrorModel = require('prosemirror-model');
 var prosemirrorSchemaList = require('prosemirror-schema-list');
 var prosemirrorState = require('prosemirror-state');
-var prosemirrorTables = require('prosemirror-tables');
 var prosemirrorTransform = require('prosemirror-transform');
 var prosemirrorView = require('prosemirror-view');
 
@@ -326,170 +325,6 @@ Object.defineProperty(exports, 'Transaction', {
     enumerable: true,
     get: function () { return prosemirrorState.Transaction; }
 });
-Object.defineProperty(exports, 'CellSelection', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.CellSelection; }
-});
-Object.defineProperty(exports, 'TableMap', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.TableMap; }
-});
-Object.defineProperty(exports, 'addColSpan', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addColSpan; }
-});
-Object.defineProperty(exports, 'addColumn', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addColumn; }
-});
-Object.defineProperty(exports, 'addColumnAfter', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addColumnAfter; }
-});
-Object.defineProperty(exports, 'addColumnBefore', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addColumnBefore; }
-});
-Object.defineProperty(exports, 'addRow', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addRow; }
-});
-Object.defineProperty(exports, 'addRowAfter', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addRowAfter; }
-});
-Object.defineProperty(exports, 'addRowBefore', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.addRowBefore; }
-});
-Object.defineProperty(exports, 'cellAround', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.cellAround; }
-});
-Object.defineProperty(exports, 'colCount', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.colCount; }
-});
-Object.defineProperty(exports, 'columnIsHeader', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.columnIsHeader; }
-});
-Object.defineProperty(exports, 'columnResizing', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.columnResizing; }
-});
-Object.defineProperty(exports, 'deleteColumn', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.deleteColumn; }
-});
-Object.defineProperty(exports, 'deleteRow', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.deleteRow; }
-});
-Object.defineProperty(exports, 'deleteTable', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.deleteTable; }
-});
-Object.defineProperty(exports, 'findCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.findCell; }
-});
-Object.defineProperty(exports, 'fixTables', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.fixTables; }
-});
-Object.defineProperty(exports, 'fixTablesKey', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.fixTablesKey; }
-});
-Object.defineProperty(exports, 'goToNextCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.goToNextCell; }
-});
-Object.defineProperty(exports, 'inSameTable', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.inSameTable; }
-});
-Object.defineProperty(exports, 'isInTable', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.isInTable; }
-});
-Object.defineProperty(exports, 'mergeCells', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.mergeCells; }
-});
-Object.defineProperty(exports, 'moveCellForward', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.moveCellForward; }
-});
-Object.defineProperty(exports, 'nextCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.nextCell; }
-});
-Object.defineProperty(exports, 'removeColSpan', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.removeColSpan; }
-});
-Object.defineProperty(exports, 'rowIsHeader', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.rowIsHeader; }
-});
-Object.defineProperty(exports, 'selectedRect', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.selectedRect; }
-});
-Object.defineProperty(exports, 'selectionCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.selectionCell; }
-});
-Object.defineProperty(exports, 'setCellAttr', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.setCellAttr; }
-});
-Object.defineProperty(exports, 'splitCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.splitCell; }
-});
-Object.defineProperty(exports, 'splitCellWithType', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.splitCellWithType; }
-});
-Object.defineProperty(exports, 'tableEditing', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.tableEditing; }
-});
-Object.defineProperty(exports, 'tableEditingKey', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.tableEditingKey; }
-});
-Object.defineProperty(exports, 'tableNodeTypes', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.tableNodeTypes; }
-});
-Object.defineProperty(exports, 'tableNodes', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.tableNodes; }
-});
-Object.defineProperty(exports, 'toggleHeader', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.toggleHeader; }
-});
-Object.defineProperty(exports, 'toggleHeaderCell', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.toggleHeaderCell; }
-});
-Object.defineProperty(exports, 'toggleHeaderColumn', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.toggleHeaderColumn; }
-});
-Object.defineProperty(exports, 'toggleHeaderRow', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.toggleHeaderRow; }
-});
-Object.defineProperty(exports, 'updateColumnsOnResize', {
-    enumerable: true,
-    get: function () { return prosemirrorTables.updateColumnsOnResize; }
-});
 Object.defineProperty(exports, 'AddMarkStep', {
     enumerable: true,
     get: function () { return prosemirrorTransform.AddMarkStep; }
diff --git a/node_modules/@bangle.dev/pm/dist/index.d.ts b/node_modules/@bangle.dev/pm/dist/index.d.ts
index 5c04248..c92d709 100644
--- a/node_modules/@bangle.dev/pm/dist/index.d.ts
+++ b/node_modules/@bangle.dev/pm/dist/index.d.ts
@@ -8,7 +8,6 @@ export { keydownHandler, keymap } from 'prosemirror-keymap';
 import { ResolvedPos, Slice } from 'prosemirror-model';
 export { AttributeSpec, ContentMatch, DOMOutputSpec, DOMParser, DOMSerializer, Fragment, Mark, MarkSpec, MarkType, Node, NodeRange, NodeSpec, NodeType, ParseOptions, ParseRule, ReplaceError, ResolvedPos, Schema, SchemaSpec, Slice } from 'prosemirror-model';
 export { addListNodes, bulletList, liftListItem, listItem, orderedList, sinkListItem, splitListItem, wrapInList } from 'prosemirror-schema-list';
-export { CellSelection, TableMap, addColSpan, addColumn, addColumnAfter, addColumnBefore, addRow, addRowAfter, addRowBefore, cellAround, colCount, columnIsHeader, columnResizing, deleteColumn, deleteRow, deleteTable, findCell, fixTables, fixTablesKey, goToNextCell, inSameTable, isInTable, mergeCells, moveCellForward, nextCell, removeColSpan, rowIsHeader, selectedRect, selectionCell, setCellAttr, splitCell, splitCellWithType, tableEditing, tableEditingKey, tableNodeTypes, tableNodes, toggleHeader, toggleHeaderCell, toggleHeaderColumn, toggleHeaderRow, updateColumnsOnResize } from 'prosemirror-tables';
 export { AddMarkStep, MapResult, Mappable, Mapping, RemoveMarkStep, ReplaceAroundStep, ReplaceStep, Step, StepMap, StepResult, Transform, canJoin, canSplit, dropPoint, findWrapping, insertPoint, joinPoint, liftTarget, replaceStep } from 'prosemirror-transform';
 import { EditorView } from 'prosemirror-view';
 export { Decoration, DecorationAttrs, DecorationSet, DirectEditorProps, EditorProps, EditorView, NodeView } from 'prosemirror-view';
diff --git a/node_modules/@bangle.dev/pm/dist/index.js b/node_modules/@bangle.dev/pm/dist/index.js
index 4963e59..7d282a9 100644
--- a/node_modules/@bangle.dev/pm/dist/index.js
+++ b/node_modules/@bangle.dev/pm/dist/index.js
@@ -7,7 +7,6 @@ export { keydownHandler, keymap } from 'prosemirror-keymap';
 export { ContentMatch, DOMParser, DOMSerializer, Fragment, Mark, MarkType, Node, NodeRange, NodeType, ReplaceError, ResolvedPos, Schema, Slice } from 'prosemirror-model';
 export { addListNodes, bulletList, liftListItem, listItem, orderedList, sinkListItem, splitListItem, wrapInList } from 'prosemirror-schema-list';
 export { AllSelection, EditorState, NodeSelection, Plugin, PluginKey, Selection, SelectionRange, TextSelection, Transaction } from 'prosemirror-state';
-export { CellSelection, TableMap, addColSpan, addColumn, addColumnAfter, addColumnBefore, addRow, addRowAfter, addRowBefore, cellAround, colCount, columnIsHeader, columnResizing, deleteColumn, deleteRow, deleteTable, findCell, fixTables, fixTablesKey, goToNextCell, inSameTable, isInTable, mergeCells, moveCellForward, nextCell, removeColSpan, rowIsHeader, selectedRect, selectionCell, setCellAttr, splitCell, splitCellWithType, tableEditing, tableEditingKey, tableNodeTypes, tableNodes, toggleHeader, toggleHeaderCell, toggleHeaderColumn, toggleHeaderRow, updateColumnsOnResize } from 'prosemirror-tables';
 export { AddMarkStep, MapResult, Mapping, RemoveMarkStep, ReplaceAroundStep, ReplaceStep, Step, StepMap, StepResult, Transform, canJoin, canSplit, dropPoint, findWrapping, insertPoint, joinPoint, liftTarget, replaceStep } from 'prosemirror-transform';
 import { __parseFromClipboard, __serializeForClipboard } from 'prosemirror-view';
 export { Decoration, DecorationSet, EditorView } from 'prosemirror-view';
