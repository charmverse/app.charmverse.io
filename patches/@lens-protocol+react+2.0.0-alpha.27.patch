diff --git a/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreateComment.d.ts b/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreateComment.d.ts
index 578a1a6..c1a5e0f 100644
--- a/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreateComment.d.ts
+++ b/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreateComment.d.ts
@@ -4,6 +4,7 @@ import { OpenActionConfig, ReferencePolicyConfig } from '@lens-protocol/domain/u
 import { BroadcastingError } from '@lens-protocol/domain/use-cases/transactions';
 import { UseDeferredTask } from "../helpers/tasks.js";
 import { AsyncTransactionResult } from "./adapters/AsyncTransactionResult.js";
+import { Session } from '@lens-protocol/react-web';
 /**
  * An object representing the result of a comment creation.
  *
@@ -49,6 +50,8 @@ export type CreateCommentArgs = {
      * @defaultValue true, the request will be attempted to be sponsored by the Lens API.
      */
     sponsored?: boolean;
+
+    session?: Session
 };
 /**
  * `useCreateComment` is React Hook that allows you to create a new Lens Comment.
diff --git a/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreatePost.d.ts b/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreatePost.d.ts
index c588acc..ee517e5 100644
--- a/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreatePost.d.ts
+++ b/node_modules/@lens-protocol/react/dist/declarations/src/transactions/useCreatePost.d.ts
@@ -4,6 +4,7 @@ import { OpenActionConfig, ReferencePolicyConfig } from '@lens-protocol/domain/u
 import { BroadcastingError } from '@lens-protocol/domain/use-cases/transactions';
 import { UseDeferredTask } from "../helpers/tasks.js";
 import { AsyncTransactionResult } from "./adapters/AsyncTransactionResult.js";
+import { Session } from '@lens-protocol/react-web';
 /**
  * An object representing the result of a post creation.
  *
@@ -45,6 +46,8 @@ export type CreatePostArgs = {
      * @defaultValue true, the request will be attempted to be sponsored by the Lens API.
      */
     sponsored?: boolean;
+
+    session?: Session
 };
 /**
  * `useCreatePost` is a React Hook that allows you to create a new Lens Post.
diff --git a/node_modules/@lens-protocol/react/dist/lens-protocol-react.esm.js b/node_modules/@lens-protocol/react/dist/lens-protocol-react.esm.js
index 434aa07..6e1f141 100644
--- a/node_modules/@lens-protocol/react/dist/lens-protocol-react.esm.js
+++ b/node_modules/@lens-protocol/react/dist/lens-protocol-react.esm.js
@@ -10851,8 +10851,6 @@ function useCreateCommentController() {
  * @group Hooks
  */
 function useCreateComment() {
-  var _useSession = useSession(),
-    session = _useSession.data;
   var createComment = useCreateCommentController();
   return useDeferredTask( /*#__PURE__*/function () {
     var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {
@@ -10861,10 +10859,10 @@ function useCreateComment() {
       return _regeneratorRuntime().wrap(function _callee$(_context) {
         while (1) switch (_context.prev = _context.next) {
           case 0:
-            invariant(session === null || session === void 0 ? void 0 : session.authenticated, 'You must be authenticated to create a comment. Use `useLogin` hook to authenticate.');
-            invariant(session.type === SessionType.WithProfile, 'You must have a profile to create a comment.');
+            invariant(args.session === null || args.session === void 0 ? void 0 : args.session.authenticated, 'You must be authenticated to create a comment. Use `useLogin` hook to authenticate.');
+            invariant(args.session.type === SessionType.WithProfile, 'You must have a profile to create a comment.');
             request = createCommentRequest(_objectSpread2({
-              signless: session.profile.signless,
+              signless: args.session.profile.signless,
               sponsored: (_args$sponsored = args.sponsored) !== null && _args$sponsored !== void 0 ? _args$sponsored : true
             }, args));
             return _context.abrupt("return", createComment(request));
@@ -12273,8 +12271,6 @@ function useCreatePostController() {
  * @group Hooks
  */
 function useCreatePost() {
-  var _useSession = useSession(),
-    session = _useSession.data;
   var createPost = useCreatePostController();
   return useDeferredTask( /*#__PURE__*/function () {
     var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {
@@ -12283,10 +12279,10 @@ function useCreatePost() {
       return _regeneratorRuntime().wrap(function _callee$(_context) {
         while (1) switch (_context.prev = _context.next) {
           case 0:
-            invariant(session === null || session === void 0 ? void 0 : session.authenticated, 'You must be authenticated to create a post. Use `useLogin` hook to authenticate.');
-            invariant(session.type === SessionType.WithProfile, 'You must have a profile to create a post.');
+            invariant(args.session === null || args.session === void 0 ? void 0 : args.session.authenticated, 'You must be authenticated to create a post. Use `useLogin` hook to authenticate.');
+            invariant(args.session.type === SessionType.WithProfile, 'You must have a profile to create a post.');
             request = createPostRequest(_objectSpread2({
-              signless: session.profile.signless,
+              signless: args.session.profile.signless,
               sponsored: (_args$sponsored = args.sponsored) !== null && _args$sponsored !== void 0 ? _args$sponsored : true
             }, args));
             return _context.abrupt("return", createPost(request));
