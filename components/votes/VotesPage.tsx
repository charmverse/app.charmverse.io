import { Box, Stack, Typography } from '@mui/material';
import VoteIcon from '@mui/icons-material/HowToVoteOutlined';
import { Vote } from '@prisma/client';
import ScrollableWindow from 'components/common/PageLayout/components/ScrollableWindow';
import { PagesMap } from 'hooks/usePages';
import Database from 'components/common/Database';
import { Column, Row, View } from 'components/common/Database/interfaces';
import { createBoard } from 'components/common/BoardEditor/focalboard/src/blocks/board';
import { createBoardView } from 'components/common/BoardEditor/focalboard/src/blocks/boardView';
import { createCard } from 'components/common/BoardEditor/focalboard/src/blocks/card';

const votes: Vote[] = [{
  createdAt: new Date(),
  initiatorId: 'cc',
  id: 'aa',
  title: 'Put it to a vote!',
  description: '',
  pageId: '',
  deadline: new Date(),
  options: [],
  status: 'Cancelled'
}];

export default function VotesPage () {

  const board = createBoard({ addDefaultProperty: true });

  const columns: Column[] = [
    { id: 'title', label: 'Title' },
    { id: 'created', label: 'Created' },
    { id: 'deadline', label: 'Deadline' },
    { id: 'status', label: 'Status' }
  ];

  const view = createBoardView();
  view.fields.viewType = 'table';
  view.title = 'Table View';
  view.parentId = board.id;
  view.rootId = board.rootId;

  const views = [view];

  const pages: PagesMap = {};

  const cards = votes.reduce<Record<string, Row>>((voteMap, vote) => {
    const card = createCard();
    card.parentId = board.id;
    card.rootId = board.rootId;
    card.title = vote.title;
    view.fields.status = vote.status;
    view.fields.deadline = vote.deadline;
    view.fields.created = vote.createdAt;
    card.fields.contentOrder = [];
    view.fields.cardOrder.push(card.id);
    voteMap[card.id] = card;
    pages[card.id] = {
      autoGenerated: false,
      content: null,
      contentText: '',
      headerImage: null,
      icon: null,
      index: -1,
      path: '',
      spaceId: null,
      parentId: null,
      type: 'page',
      boardId: null,
      snapshotProposalId: null,
      cardId: card.id,
      fullWidth: false,
      createdAt: vote.createdAt,
      createdBy: vote.initiatorId,
      updatedAt: vote.createdAt,
      updatedBy: vote.initiatorId,
      permissions: [],
      id: card.id,
      deletedAt: null,
      title: vote.title
    };
    return voteMap;
  }, {});

  return (
    <ScrollableWindow>
      <Box py={3} sx={{ px: { xs: '40px', sm: '80px' }, minHeight: '80vh' }}>
        <Stack direction='row' alignItems='center' gap={1} mb={1}>
          <VoteIcon fontSize='large' />
          <Typography variant='h1'> Votes</Typography>
        </Stack>
        <Database
          activeViewId={view.id}
          board={board}
          cards={cards}
          pages={pages}
          views={views}
        />
      </Box>
    </ScrollableWindow>
  );
}
