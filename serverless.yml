service: cvServerless

frameworkVersion: "3"

useDotenv: true

# Create an optimized package for our functions
package:
  individually: true
  patterns:
    - serverless/*.node
    - serverless/schema.prisma

plugins:
  # This plugins allows to use TS
  - serverless-esbuild
  # This plugins gives superpowers to serverless and allows us to deploy SQS queues easily
  - serverless-lift
  - serverless-scriptable-plugin
  - serverless-offline

custom:
  esbuild:
    external: ["canvas"]
    # uglify-js via mjml uses require.resolve() to find local files, which breaks esbuild. we don't need it since we don't do minification
    alias: { 'uglify-js': 'serverless/packageShim' }
    watch:
      pattern: ["serverless/**/*.ts"] # match only typescript files in serverless directory
  scriptHooks:
    package:initialize: node ./copyPrismaFiles.js

# This uses the lift plugin to generate our SQS setup in AWS
# Based on https://github.com/getlift/lift/blob/master/docs/queue.md
constructs:
  webhook-queue:
    type: queue
    # Setup the queue as FIFO
    fifo: true
    # maxRetries: 5 <-- Adjust retries attempt if the job fails, default to 3
    worker:
      # Function responsible for handle messages in the queue
      handler: serverless/handler.webhookWorker
      environment:
        DATABASE_URL: ${env:DATABASE_URL}
        MAILGUN_DOMAIN: ${env:MAILGUN_DOMAIN}
        MAILGUN_KEY: ${env:MAILGUN_KEY}
        PERMISSIONS_API_URL: ${env:PERMISSIONS_API_URL}
        DOMAIN: https://app.charmverse.io

    extensions:
      queue:
        Properties:
          # Using predictable queue names, allows us to be consistent across every deployments
          # We can use branch names as stages, so each deployed env can have their own queue
          QueueName: charmverse-serverless-queue-${sls:stage}.fifo

provider:
  name: aws
  runtime: nodejs18.x
  deploymentMethod: direct

functions:
  # This function is purely for testing our implementation, it received a webhook call and logs it
  # Returns a 200 HTTP response
  webhookChecker:
    handler: serverless/handler.webhookChecker
    events:
      - httpApi: "POST /webhook"
