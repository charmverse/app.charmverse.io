service: cvServerless

frameworkVersion: '3'

useDotenv: true

# Create an optimized package for our functions
package:
  patterns:
    # Ensure we only includes usefull prisma libs
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'
  individually: true

plugins:
  # This plugins allows to use TS
  - serverless-esbuild
  # This plugins gives superpowers to serverless and allows us to deploy SQS queues easily
  - serverless-lift

custom:
  esbuild:
    watch:
      pattern: ['serverless/**/*.ts'] # match only typescript files in serverless directory

# This uses the lift plugin to generate our SQS setup in AWS
# Based on https://github.com/getlift/lift/blob/master/docs/queue.md
constructs:
  webhook-queue:
    type: queue
    # Setup the queue as FIFO
    fifo: true
    # maxRetries: 5 <-- Adjust retries attempt if the job fails, default to 3
    worker:
      # Function responsible for handle messages in the queue
      handler: serverless/handler.webhookWorker
    extensions:
      queue:
        Properties:
          # Using predictable queue names, allows us to be consistent across every deployments
          # We can use branch names as stages, so each deployed env can have their own queue
          QueueName: charmverse-serverless-queue-${sls:stage}.fifo

provider:
  name: aws
  runtime: nodejs14.x
  deploymentMethod: direct
  environment:
    # Used by prisma
    DATABASE_URL: ${env:DATABASE_URL}

functions:
  # This function is purely for testing our implementation, it received a webhook call and logs it
  # Returns a 200 HTTP response
  webhookEndpoint:
    handler: serverless/handler.webhookEndpoint
    events:
      - httpApi: 'POST /webhook'
