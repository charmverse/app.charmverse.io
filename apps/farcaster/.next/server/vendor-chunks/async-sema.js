"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/async-sema";
exports.ids = ["vendor-chunks/async-sema"];
exports.modules = {

/***/ "(ssr)/../../node_modules/async-sema/lib/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/async-sema/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RateLimit = exports.Sema = void 0;\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nfunction arrayMove(src, srcIndex, dst, dstIndex, len) {\n    for (let j = 0; j < len; ++j) {\n        dst[j + dstIndex] = src[j + srcIndex];\n        src[j + srcIndex] = void 0;\n    }\n}\nfunction pow2AtLeast(n) {\n    n = n >>> 0;\n    n = n - 1;\n    n = n | (n >> 1);\n    n = n | (n >> 2);\n    n = n | (n >> 4);\n    n = n | (n >> 8);\n    n = n | (n >> 16);\n    return n + 1;\n}\nfunction getCapacity(capacity) {\n    return pow2AtLeast(Math.min(Math.max(16, capacity), 1073741824));\n}\n// Deque is based on https://github.com/petkaantonov/deque/blob/master/js/deque.js\n// Released under the MIT License: https://github.com/petkaantonov/deque/blob/6ef4b6400ad3ba82853fdcc6531a38eb4f78c18c/LICENSE\nclass Deque {\n    constructor(capacity) {\n        this._capacity = getCapacity(capacity);\n        this._length = 0;\n        this._front = 0;\n        this.arr = [];\n    }\n    push(item) {\n        const length = this._length;\n        this.checkCapacity(length + 1);\n        const i = (this._front + length) & (this._capacity - 1);\n        this.arr[i] = item;\n        this._length = length + 1;\n        return length + 1;\n    }\n    pop() {\n        const length = this._length;\n        if (length === 0) {\n            return void 0;\n        }\n        const i = (this._front + length - 1) & (this._capacity - 1);\n        const ret = this.arr[i];\n        this.arr[i] = void 0;\n        this._length = length - 1;\n        return ret;\n    }\n    shift() {\n        const length = this._length;\n        if (length === 0) {\n            return void 0;\n        }\n        const front = this._front;\n        const ret = this.arr[front];\n        this.arr[front] = void 0;\n        this._front = (front + 1) & (this._capacity - 1);\n        this._length = length - 1;\n        return ret;\n    }\n    get length() {\n        return this._length;\n    }\n    checkCapacity(size) {\n        if (this._capacity < size) {\n            this.resizeTo(getCapacity(this._capacity * 1.5 + 16));\n        }\n    }\n    resizeTo(capacity) {\n        const oldCapacity = this._capacity;\n        this._capacity = capacity;\n        const front = this._front;\n        const length = this._length;\n        if (front + length > oldCapacity) {\n            const moveItemsCount = (front + length) & (oldCapacity - 1);\n            arrayMove(this.arr, 0, this.arr, oldCapacity, moveItemsCount);\n        }\n    }\n}\nclass ReleaseEmitter extends events_1.default {\n}\nfunction isFn(x) {\n    return typeof x === 'function';\n}\nfunction defaultInit() {\n    return '1';\n}\nclass Sema {\n    constructor(nr, { initFn = defaultInit, pauseFn, resumeFn, capacity = 10, } = {}) {\n        if (isFn(pauseFn) !== isFn(resumeFn)) {\n            throw new Error('pauseFn and resumeFn must be both set for pausing');\n        }\n        this.nrTokens = nr;\n        this.free = new Deque(nr);\n        this.waiting = new Deque(capacity);\n        this.releaseEmitter = new ReleaseEmitter();\n        this.noTokens = initFn === defaultInit;\n        this.pauseFn = pauseFn;\n        this.resumeFn = resumeFn;\n        this.paused = false;\n        this.releaseEmitter.on('release', (token) => {\n            const p = this.waiting.shift();\n            if (p) {\n                p.resolve(token);\n            }\n            else {\n                if (this.resumeFn && this.paused) {\n                    this.paused = false;\n                    this.resumeFn();\n                }\n                this.free.push(token);\n            }\n        });\n        for (let i = 0; i < nr; i++) {\n            this.free.push(initFn());\n        }\n    }\n    tryAcquire() {\n        return this.free.pop();\n    }\n    async acquire() {\n        let token = this.tryAcquire();\n        if (token !== void 0) {\n            return token;\n        }\n        return new Promise((resolve, reject) => {\n            if (this.pauseFn && !this.paused) {\n                this.paused = true;\n                this.pauseFn();\n            }\n            this.waiting.push({ resolve, reject });\n        });\n    }\n    release(token) {\n        this.releaseEmitter.emit('release', this.noTokens ? '1' : token);\n    }\n    drain() {\n        const a = new Array(this.nrTokens);\n        for (let i = 0; i < this.nrTokens; i++) {\n            a[i] = this.acquire();\n        }\n        return Promise.all(a);\n    }\n    nrWaiting() {\n        return this.waiting.length;\n    }\n}\nexports.Sema = Sema;\nfunction RateLimit(rps, { timeUnit = 1000, uniformDistribution = false, } = {}) {\n    const sema = new Sema(uniformDistribution ? 1 : rps);\n    const delay = uniformDistribution ? timeUnit / rps : timeUnit;\n    return async function rl() {\n        await sema.acquire();\n        setTimeout(() => sema.release(), delay);\n    };\n}\nexports.RateLimit = RateLimit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/async-sema/lib/index.js\n");

/***/ })

};
;